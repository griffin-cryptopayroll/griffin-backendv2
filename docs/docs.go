// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Sang Il Bae",
            "email": "baesangil0906@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/employType": {
            "get": {
                "description": "Whether the employer is full-time worker(fulltime) or contract worker(contract)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Employ type.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Enumerator (fulltime or contract)",
                        "name": "isPerma",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Single formed frequency, such as D(Day), W(Week), M(Month), Y(Year)",
                        "name": "payFreq",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.EMPLOY_TYPE"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Whether the employer is full-time worker(fulltime) or contract worker(contract)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add Employ type.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Enumerator (fulltime or contract)",
                        "name": "isPerma",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Single formed frequency, such as D(Day), W(Week), M(Month), Y(Year)",
                        "name": "payFreq",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Not yet implemented",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Employ type.",
                "responses": {
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/employee": {
            "post": {
                "description": "Worker's information needed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Post employee to the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Full name, since crypto lovers don't use their original name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Position ex: Backend engineer, Frontend engineer",
                        "name": "position",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Employee's information. His or her payment wallet address",
                        "name": "wallet",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Payroll amount in float",
                        "name": "payroll",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID (integer) of the payroll currency",
                        "name": "currency",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employee's information. Corp or organization's em",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employee's information. Corp Gid or Organization Gid",
                        "name": "employer_gid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employee's information. When does he or she starts work. In YYYYMMDD",
                        "name": "work_start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employee's information. When does he or she ends work. In YYYYMMDD",
                        "name": "work_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Worker's information needed. His/Her Griffin ID (GID) and employer Griffin ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete employee from the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee's griffin id (in uuid form)",
                        "name": "gid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employee's information. Corp Gid or Organization Gid",
                        "name": "employer_gid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/employee/multi": {
            "get": {
                "description": "Worker's information needed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Query employee from the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee's information. Corp Gid or Organization Gid",
                        "name": "employer_gid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gcrud.EmployeeJson"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/employee/single": {
            "get": {
                "description": "Worker's information needed. Worker is singled out with their griffin id and his employer id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Query employee from the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee's griffin id (in uuid form)",
                        "name": "gid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employee's information. Corp Gid or Organization Gid",
                        "name": "employer_gid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gcrud.EmployeeJson"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/employer": {
            "get": {
                "description": "Employer Griffin ID is in UUID form. Login gives you access to UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Query employer from the database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employer's griffin id (in uuid form)",
                        "name": "gid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gcrud.EmployerJson"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Employer information is registered by google form.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Post employer to the database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employer's user id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Employer's user password.",
                        "name": "pw",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employer information (corp or organization name)",
                        "name": "corp_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Employer information (corp or organization email)",
                        "name": "corp_email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employer's griffin id (in uuid form)",
                        "name": "wallet",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deleting the employer will delete all the employee's related to that employer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete employer to the database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employer's griffin id (in uuid form)",
                        "name": "gid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Not yet implemented",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Employer.",
                "responses": {
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "get": {
                "description": "Matches Username with Password. If Username does not exists, 500 error.\nTODO: change it to return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login into griffin payroll service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employer's username (in email form)",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Employer's password",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.EMPLOYER_USER_INFO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Check 1) server is alive 2) database is alive.\nDatabase ping using internal sql method in golang",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Server, DB ping test",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/price": {
            "get": {
                "description": "ETH, MATIC data from binance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all the price information that Griffin serves",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/price.PriceInformation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "description": "env file's parameter is GRIFFIN_WS_VERSION",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Read version file from environment file.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CommonResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ent.CRYPTO_CURRENCY": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the CRYPTO_CURRENCYQuery when eager-loading is set.",
                    "$ref": "#/definitions/ent.CRYPTO_CURRENCYEdges"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "source": {
                    "description": "Source holds the value of the \"source\" field.",
                    "type": "integer"
                },
                "ticker": {
                    "description": "Ticker holds the value of the \"ticker\" field.",
                    "type": "string"
                }
            }
        },
        "ent.CRYPTO_CURRENCYEdges": {
            "type": "object",
            "properties": {
                "employee_paid": {
                    "description": "EmployeePaid holds the value of the employee_paid edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.EMPLOYEE"
                    }
                },
                "source_of": {
                    "description": "SourceOf holds the value of the source_of edge.",
                    "$ref": "#/definitions/ent.CRYPTO_PRC_SOURCE"
                }
            }
        },
        "ent.CRYPTO_PRC_SOURCE": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the CRYPTO_PRC_SOURCEQuery when eager-loading is set.",
                    "$ref": "#/definitions/ent.CRYPTO_PRC_SOURCEEdges"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.CRYPTO_PRC_SOURCEEdges": {
            "type": "object",
            "properties": {
                "price_of": {
                    "description": "PriceOf holds the value of the price_of edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.CRYPTO_CURRENCY"
                    }
                }
            }
        },
        "ent.EMPLOYEE": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "currency": {
                    "description": "Currency holds the value of the \"currency\" field.",
                    "type": "integer"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the EMPLOYEEQuery when eager-loading is set.",
                    "$ref": "#/definitions/ent.EMPLOYEEEdges"
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "employ": {
                    "description": "Employ holds the value of the \"employ\" field.",
                    "type": "integer"
                },
                "employer_gid": {
                    "description": "EmployerGid holds the value of the \"employer_gid\" field.",
                    "type": "string"
                },
                "gid": {
                    "description": "Gid holds the value of the \"gid\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "payday": {
                    "description": "Payday holds the value of the \"payday\" field.",
                    "type": "string"
                },
                "payroll": {
                    "description": "Payroll holds the value of the \"payroll\" field.",
                    "type": "number"
                },
                "position": {
                    "description": "Position holds the value of the \"position\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                },
                "wallet": {
                    "description": "Wallet holds the value of the \"wallet\" field.",
                    "type": "string"
                },
                "work_ends": {
                    "description": "WorkEnds holds the value of the \"work_ends\" field.",
                    "type": "string"
                },
                "work_start": {
                    "description": "WorkStart holds the value of the \"work_start\" field.",
                    "type": "string"
                }
            }
        },
        "ent.EMPLOYEEEdges": {
            "type": "object",
            "properties": {
                "employee_gets": {
                    "description": "EmployeeGets holds the value of the employee_gets edge.",
                    "$ref": "#/definitions/ent.CRYPTO_CURRENCY"
                },
                "employee_type_from": {
                    "description": "EmployeeTypeFrom holds the value of the employee_type_from edge.",
                    "$ref": "#/definitions/ent.EMPLOY_TYPE"
                },
                "payment_history": {
                    "description": "PaymentHistory holds the value of the payment_history edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.PAYMENT_HISTORY"
                    }
                },
                "work_for": {
                    "description": "WorkFor holds the value of the work_for edge.",
                    "$ref": "#/definitions/ent.EMPLOYER_USER_INFO"
                }
            }
        },
        "ent.EMPLOYER_USER_INFO": {
            "type": "object",
            "properties": {
                "corp_email": {
                    "description": "CorpEmail holds the value of the \"corp_email\" field.",
                    "type": "string"
                },
                "corp_name": {
                    "description": "CorpName holds the value of the \"corp_name\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the EMPLOYER_USER_INFOQuery when eager-loading is set.",
                    "$ref": "#/definitions/ent.EMPLOYER_USER_INFOEdges"
                },
                "gid": {
                    "description": "Gid holds the value of the \"gid\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "password": {
                    "description": "Password holds the value of the \"password\" field.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "updated_by": {
                    "description": "UpdatedBy holds the value of the \"updated_by\" field.",
                    "type": "string"
                },
                "username": {
                    "description": "Username holds the value of the \"username\" field.",
                    "type": "string"
                },
                "wallet": {
                    "description": "Wallet holds the value of the \"wallet\" field.",
                    "type": "string"
                }
            }
        },
        "ent.EMPLOYER_USER_INFOEdges": {
            "type": "object",
            "properties": {
                "work_under": {
                    "description": "WorkUnder holds the value of the work_under edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.EMPLOYEE"
                    }
                }
            }
        },
        "ent.EMPLOY_TYPE": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the EMPLOY_TYPEQuery when eager-loading is set.",
                    "$ref": "#/definitions/ent.EMPLOY_TYPEEdges"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "is_permanent": {
                    "description": "IsPermanent holds the value of the \"is_permanent\" field.",
                    "type": "string"
                },
                "pay_freq": {
                    "description": "PayFreq holds the value of the \"pay_freq\" field.",
                    "type": "string"
                }
            }
        },
        "ent.EMPLOY_TYPEEdges": {
            "type": "object",
            "properties": {
                "employee_type_to": {
                    "description": "EmployeeTypeTo holds the value of the employee_type_to edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.EMPLOYEE"
                    }
                }
            }
        },
        "ent.PAYMENT_HISTORY": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "created_by": {
                    "description": "CreatedBy holds the value of the \"created_by\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the PAYMENT_HISTORYQuery when eager-loading is set.",
                    "$ref": "#/definitions/ent.PAYMENT_HISTORYEdges"
                },
                "employee_gid": {
                    "description": "EmployeeGid holds the value of the \"employee_gid\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                }
            }
        },
        "ent.PAYMENT_HISTORYEdges": {
            "type": "object",
            "properties": {
                "payment_history_rec": {
                    "description": "PaymentHistoryRec holds the value of the payment_history_rec edge.",
                    "$ref": "#/definitions/ent.EMPLOYEE"
                }
            }
        },
        "gcrud.EmployeeJson": {
            "type": "object",
            "required": [
                "email",
                "employ_type",
                "name",
                "payday",
                "position",
                "wallet",
                "work_end",
                "work_start"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "description": "foreign key currency table",
                    "type": "integer"
                },
                "email": {
                    "type": "string",
                    "example": "example@ex.com"
                },
                "employ_type": {
                    "description": "foreign key employ type",
                    "type": "integer"
                },
                "employer_gid": {
                    "type": "string"
                },
                "gid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string"
                },
                "payday": {
                    "type": "string"
                },
                "payroll": {
                    "type": "number"
                },
                "position": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string"
                },
                "work_end": {
                    "type": "string",
                    "example": "20221231"
                },
                "work_start": {
                    "type": "string",
                    "example": "20220701"
                }
            }
        },
        "gcrud.EmployerJson": {
            "type": "object",
            "properties": {
                "corp_email": {
                    "type": "string"
                },
                "corp_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "gid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string"
                }
            }
        },
        "price.PriceInformation": {
            "type": "object",
            "properties": {
                "ethusdt": {
                    "type": "number"
                },
                "maticusdt": {
                    "type": "number"
                },
                "usdcusdt": {
                    "type": "number"
                }
            }
        },
        "v1.CommonResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "database (create / delete) (successful / failed)"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "Document 1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Griffin Web Server API Documentation",
	Description:      "Griffin webserver that serves, employee .",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
