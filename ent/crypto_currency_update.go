// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/crypto_currency"
	"griffin-dao/ent/crypto_prc_source"
	"griffin-dao/ent/employee"
	"griffin-dao/ent/payment_history"
	"griffin-dao/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CRYPTOCURRENCYUpdate is the builder for updating CRYPTO_CURRENCY entities.
type CRYPTOCURRENCYUpdate struct {
	config
	hooks    []Hook
	mutation *CRYPTOCURRENCYMutation
}

// Where appends a list predicates to the CRYPTOCURRENCYUpdate builder.
func (cu *CRYPTOCURRENCYUpdate) Where(ps ...predicate.CRYPTO_CURRENCY) *CRYPTOCURRENCYUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTicker sets the "ticker" field.
func (cu *CRYPTOCURRENCYUpdate) SetTicker(s string) *CRYPTOCURRENCYUpdate {
	cu.mutation.SetTicker(s)
	return cu
}

// SetSourceID sets the "source_id" field.
func (cu *CRYPTOCURRENCYUpdate) SetSourceID(i int) *CRYPTOCURRENCYUpdate {
	cu.mutation.SetSourceID(i)
	return cu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (cu *CRYPTOCURRENCYUpdate) SetNillableSourceID(i *int) *CRYPTOCURRENCYUpdate {
	if i != nil {
		cu.SetSourceID(*i)
	}
	return cu
}

// ClearSourceID clears the value of the "source_id" field.
func (cu *CRYPTOCURRENCYUpdate) ClearSourceID() *CRYPTOCURRENCYUpdate {
	cu.mutation.ClearSourceID()
	return cu
}

// SetCurrencyFromSourceID sets the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity by ID.
func (cu *CRYPTOCURRENCYUpdate) SetCurrencyFromSourceID(id int) *CRYPTOCURRENCYUpdate {
	cu.mutation.SetCurrencyFromSourceID(id)
	return cu
}

// SetNillableCurrencyFromSourceID sets the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity by ID if the given value is not nil.
func (cu *CRYPTOCURRENCYUpdate) SetNillableCurrencyFromSourceID(id *int) *CRYPTOCURRENCYUpdate {
	if id != nil {
		cu = cu.SetCurrencyFromSourceID(*id)
	}
	return cu
}

// SetCurrencyFromSource sets the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity.
func (cu *CRYPTOCURRENCYUpdate) SetCurrencyFromSource(c *CRYPTO_PRC_SOURCE) *CRYPTOCURRENCYUpdate {
	return cu.SetCurrencyFromSourceID(c.ID)
}

// AddCurrencyOfEmployeeIDs adds the "currency_of_employee" edge to the EMPLOYEE entity by IDs.
func (cu *CRYPTOCURRENCYUpdate) AddCurrencyOfEmployeeIDs(ids ...int) *CRYPTOCURRENCYUpdate {
	cu.mutation.AddCurrencyOfEmployeeIDs(ids...)
	return cu
}

// AddCurrencyOfEmployee adds the "currency_of_employee" edges to the EMPLOYEE entity.
func (cu *CRYPTOCURRENCYUpdate) AddCurrencyOfEmployee(e ...*EMPLOYEE) *CRYPTOCURRENCYUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddCurrencyOfEmployeeIDs(ids...)
}

// AddCurrencyOfPaymentHistoryIDs adds the "currency_of_payment_history" edge to the PAYMENT_HISTORY entity by IDs.
func (cu *CRYPTOCURRENCYUpdate) AddCurrencyOfPaymentHistoryIDs(ids ...int) *CRYPTOCURRENCYUpdate {
	cu.mutation.AddCurrencyOfPaymentHistoryIDs(ids...)
	return cu
}

// AddCurrencyOfPaymentHistory adds the "currency_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (cu *CRYPTOCURRENCYUpdate) AddCurrencyOfPaymentHistory(p ...*PAYMENT_HISTORY) *CRYPTOCURRENCYUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddCurrencyOfPaymentHistoryIDs(ids...)
}

// Mutation returns the CRYPTOCURRENCYMutation object of the builder.
func (cu *CRYPTOCURRENCYUpdate) Mutation() *CRYPTOCURRENCYMutation {
	return cu.mutation
}

// ClearCurrencyFromSource clears the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity.
func (cu *CRYPTOCURRENCYUpdate) ClearCurrencyFromSource() *CRYPTOCURRENCYUpdate {
	cu.mutation.ClearCurrencyFromSource()
	return cu
}

// ClearCurrencyOfEmployee clears all "currency_of_employee" edges to the EMPLOYEE entity.
func (cu *CRYPTOCURRENCYUpdate) ClearCurrencyOfEmployee() *CRYPTOCURRENCYUpdate {
	cu.mutation.ClearCurrencyOfEmployee()
	return cu
}

// RemoveCurrencyOfEmployeeIDs removes the "currency_of_employee" edge to EMPLOYEE entities by IDs.
func (cu *CRYPTOCURRENCYUpdate) RemoveCurrencyOfEmployeeIDs(ids ...int) *CRYPTOCURRENCYUpdate {
	cu.mutation.RemoveCurrencyOfEmployeeIDs(ids...)
	return cu
}

// RemoveCurrencyOfEmployee removes "currency_of_employee" edges to EMPLOYEE entities.
func (cu *CRYPTOCURRENCYUpdate) RemoveCurrencyOfEmployee(e ...*EMPLOYEE) *CRYPTOCURRENCYUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveCurrencyOfEmployeeIDs(ids...)
}

// ClearCurrencyOfPaymentHistory clears all "currency_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (cu *CRYPTOCURRENCYUpdate) ClearCurrencyOfPaymentHistory() *CRYPTOCURRENCYUpdate {
	cu.mutation.ClearCurrencyOfPaymentHistory()
	return cu
}

// RemoveCurrencyOfPaymentHistoryIDs removes the "currency_of_payment_history" edge to PAYMENT_HISTORY entities by IDs.
func (cu *CRYPTOCURRENCYUpdate) RemoveCurrencyOfPaymentHistoryIDs(ids ...int) *CRYPTOCURRENCYUpdate {
	cu.mutation.RemoveCurrencyOfPaymentHistoryIDs(ids...)
	return cu
}

// RemoveCurrencyOfPaymentHistory removes "currency_of_payment_history" edges to PAYMENT_HISTORY entities.
func (cu *CRYPTOCURRENCYUpdate) RemoveCurrencyOfPaymentHistory(p ...*PAYMENT_HISTORY) *CRYPTOCURRENCYUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveCurrencyOfPaymentHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CRYPTOCURRENCYUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CRYPTOCURRENCYMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CRYPTOCURRENCYUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CRYPTOCURRENCYUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CRYPTOCURRENCYUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CRYPTOCURRENCYUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crypto_currency.Table,
			Columns: crypto_currency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: crypto_currency.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Ticker(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crypto_currency.FieldTicker,
		})
	}
	if cu.mutation.CurrencyFromSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crypto_currency.CurrencyFromSourceTable,
			Columns: []string{crypto_currency.CurrencyFromSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_prc_source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CurrencyFromSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crypto_currency.CurrencyFromSourceTable,
			Columns: []string{crypto_currency.CurrencyFromSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_prc_source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CurrencyOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfEmployeeTable,
			Columns: []string{crypto_currency.CurrencyOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCurrencyOfEmployeeIDs(); len(nodes) > 0 && !cu.mutation.CurrencyOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfEmployeeTable,
			Columns: []string{crypto_currency.CurrencyOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CurrencyOfEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfEmployeeTable,
			Columns: []string{crypto_currency.CurrencyOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CurrencyOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfPaymentHistoryTable,
			Columns: []string{crypto_currency.CurrencyOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCurrencyOfPaymentHistoryIDs(); len(nodes) > 0 && !cu.mutation.CurrencyOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfPaymentHistoryTable,
			Columns: []string{crypto_currency.CurrencyOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CurrencyOfPaymentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfPaymentHistoryTable,
			Columns: []string{crypto_currency.CurrencyOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crypto_currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CRYPTOCURRENCYUpdateOne is the builder for updating a single CRYPTO_CURRENCY entity.
type CRYPTOCURRENCYUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CRYPTOCURRENCYMutation
}

// SetTicker sets the "ticker" field.
func (cuo *CRYPTOCURRENCYUpdateOne) SetTicker(s string) *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.SetTicker(s)
	return cuo
}

// SetSourceID sets the "source_id" field.
func (cuo *CRYPTOCURRENCYUpdateOne) SetSourceID(i int) *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.SetSourceID(i)
	return cuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (cuo *CRYPTOCURRENCYUpdateOne) SetNillableSourceID(i *int) *CRYPTOCURRENCYUpdateOne {
	if i != nil {
		cuo.SetSourceID(*i)
	}
	return cuo
}

// ClearSourceID clears the value of the "source_id" field.
func (cuo *CRYPTOCURRENCYUpdateOne) ClearSourceID() *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.ClearSourceID()
	return cuo
}

// SetCurrencyFromSourceID sets the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity by ID.
func (cuo *CRYPTOCURRENCYUpdateOne) SetCurrencyFromSourceID(id int) *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.SetCurrencyFromSourceID(id)
	return cuo
}

// SetNillableCurrencyFromSourceID sets the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity by ID if the given value is not nil.
func (cuo *CRYPTOCURRENCYUpdateOne) SetNillableCurrencyFromSourceID(id *int) *CRYPTOCURRENCYUpdateOne {
	if id != nil {
		cuo = cuo.SetCurrencyFromSourceID(*id)
	}
	return cuo
}

// SetCurrencyFromSource sets the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity.
func (cuo *CRYPTOCURRENCYUpdateOne) SetCurrencyFromSource(c *CRYPTO_PRC_SOURCE) *CRYPTOCURRENCYUpdateOne {
	return cuo.SetCurrencyFromSourceID(c.ID)
}

// AddCurrencyOfEmployeeIDs adds the "currency_of_employee" edge to the EMPLOYEE entity by IDs.
func (cuo *CRYPTOCURRENCYUpdateOne) AddCurrencyOfEmployeeIDs(ids ...int) *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.AddCurrencyOfEmployeeIDs(ids...)
	return cuo
}

// AddCurrencyOfEmployee adds the "currency_of_employee" edges to the EMPLOYEE entity.
func (cuo *CRYPTOCURRENCYUpdateOne) AddCurrencyOfEmployee(e ...*EMPLOYEE) *CRYPTOCURRENCYUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddCurrencyOfEmployeeIDs(ids...)
}

// AddCurrencyOfPaymentHistoryIDs adds the "currency_of_payment_history" edge to the PAYMENT_HISTORY entity by IDs.
func (cuo *CRYPTOCURRENCYUpdateOne) AddCurrencyOfPaymentHistoryIDs(ids ...int) *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.AddCurrencyOfPaymentHistoryIDs(ids...)
	return cuo
}

// AddCurrencyOfPaymentHistory adds the "currency_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (cuo *CRYPTOCURRENCYUpdateOne) AddCurrencyOfPaymentHistory(p ...*PAYMENT_HISTORY) *CRYPTOCURRENCYUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddCurrencyOfPaymentHistoryIDs(ids...)
}

// Mutation returns the CRYPTOCURRENCYMutation object of the builder.
func (cuo *CRYPTOCURRENCYUpdateOne) Mutation() *CRYPTOCURRENCYMutation {
	return cuo.mutation
}

// ClearCurrencyFromSource clears the "currency_from_source" edge to the CRYPTO_PRC_SOURCE entity.
func (cuo *CRYPTOCURRENCYUpdateOne) ClearCurrencyFromSource() *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.ClearCurrencyFromSource()
	return cuo
}

// ClearCurrencyOfEmployee clears all "currency_of_employee" edges to the EMPLOYEE entity.
func (cuo *CRYPTOCURRENCYUpdateOne) ClearCurrencyOfEmployee() *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.ClearCurrencyOfEmployee()
	return cuo
}

// RemoveCurrencyOfEmployeeIDs removes the "currency_of_employee" edge to EMPLOYEE entities by IDs.
func (cuo *CRYPTOCURRENCYUpdateOne) RemoveCurrencyOfEmployeeIDs(ids ...int) *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.RemoveCurrencyOfEmployeeIDs(ids...)
	return cuo
}

// RemoveCurrencyOfEmployee removes "currency_of_employee" edges to EMPLOYEE entities.
func (cuo *CRYPTOCURRENCYUpdateOne) RemoveCurrencyOfEmployee(e ...*EMPLOYEE) *CRYPTOCURRENCYUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveCurrencyOfEmployeeIDs(ids...)
}

// ClearCurrencyOfPaymentHistory clears all "currency_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (cuo *CRYPTOCURRENCYUpdateOne) ClearCurrencyOfPaymentHistory() *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.ClearCurrencyOfPaymentHistory()
	return cuo
}

// RemoveCurrencyOfPaymentHistoryIDs removes the "currency_of_payment_history" edge to PAYMENT_HISTORY entities by IDs.
func (cuo *CRYPTOCURRENCYUpdateOne) RemoveCurrencyOfPaymentHistoryIDs(ids ...int) *CRYPTOCURRENCYUpdateOne {
	cuo.mutation.RemoveCurrencyOfPaymentHistoryIDs(ids...)
	return cuo
}

// RemoveCurrencyOfPaymentHistory removes "currency_of_payment_history" edges to PAYMENT_HISTORY entities.
func (cuo *CRYPTOCURRENCYUpdateOne) RemoveCurrencyOfPaymentHistory(p ...*PAYMENT_HISTORY) *CRYPTOCURRENCYUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveCurrencyOfPaymentHistoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CRYPTOCURRENCYUpdateOne) Select(field string, fields ...string) *CRYPTOCURRENCYUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated CRYPTO_CURRENCY entity.
func (cuo *CRYPTOCURRENCYUpdateOne) Save(ctx context.Context) (*CRYPTO_CURRENCY, error) {
	var (
		err  error
		node *CRYPTO_CURRENCY
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CRYPTOCURRENCYMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CRYPTO_CURRENCY)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CRYPTOCURRENCYMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CRYPTOCURRENCYUpdateOne) SaveX(ctx context.Context) *CRYPTO_CURRENCY {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CRYPTOCURRENCYUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CRYPTOCURRENCYUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CRYPTOCURRENCYUpdateOne) sqlSave(ctx context.Context) (_node *CRYPTO_CURRENCY, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crypto_currency.Table,
			Columns: crypto_currency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: crypto_currency.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CRYPTO_CURRENCY.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, crypto_currency.FieldID)
		for _, f := range fields {
			if !crypto_currency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != crypto_currency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Ticker(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crypto_currency.FieldTicker,
		})
	}
	if cuo.mutation.CurrencyFromSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crypto_currency.CurrencyFromSourceTable,
			Columns: []string{crypto_currency.CurrencyFromSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_prc_source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CurrencyFromSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crypto_currency.CurrencyFromSourceTable,
			Columns: []string{crypto_currency.CurrencyFromSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_prc_source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CurrencyOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfEmployeeTable,
			Columns: []string{crypto_currency.CurrencyOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCurrencyOfEmployeeIDs(); len(nodes) > 0 && !cuo.mutation.CurrencyOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfEmployeeTable,
			Columns: []string{crypto_currency.CurrencyOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CurrencyOfEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfEmployeeTable,
			Columns: []string{crypto_currency.CurrencyOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CurrencyOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfPaymentHistoryTable,
			Columns: []string{crypto_currency.CurrencyOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCurrencyOfPaymentHistoryIDs(); len(nodes) > 0 && !cuo.mutation.CurrencyOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfPaymentHistoryTable,
			Columns: []string{crypto_currency.CurrencyOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CurrencyOfPaymentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   crypto_currency.CurrencyOfPaymentHistoryTable,
			Columns: []string{crypto_currency.CurrencyOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CRYPTO_CURRENCY{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crypto_currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
