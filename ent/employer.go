// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"griffin-dao/ent/employer"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EMPLOYER is the model entity for the EMPLOYER schema.
type EMPLOYER struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Gid holds the value of the "gid" field.
	Gid string `json:"gid,omitempty"`
	// CorpName holds the value of the "corp_name" field.
	CorpName string `json:"corp_name,omitempty"`
	// CorpEmail holds the value of the "corp_email" field.
	CorpEmail string `json:"corp_email,omitempty"`
	// Wallet holds the value of the "wallet" field.
	Wallet string `json:"wallet,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EMPLOYERQuery when eager-loading is set.
	Edges EMPLOYEREdges `json:"edges"`
}

// EMPLOYEREdges holds the relations/edges for other nodes in the graph.
type EMPLOYEREdges struct {
	// EmployerOfEmployee holds the value of the employer_of_employee edge.
	EmployerOfEmployee []*EMPLOYEE `json:"employer_of_employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmployerOfEmployeeOrErr returns the EmployerOfEmployee value or an error if the edge
// was not loaded in eager-loading.
func (e EMPLOYEREdges) EmployerOfEmployeeOrErr() ([]*EMPLOYEE, error) {
	if e.loadedTypes[0] {
		return e.EmployerOfEmployee, nil
	}
	return nil, &NotLoadedError{edge: "employer_of_employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EMPLOYER) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case employer.FieldID:
			values[i] = new(sql.NullInt64)
		case employer.FieldUsername, employer.FieldPassword, employer.FieldGid, employer.FieldCorpName, employer.FieldCorpEmail, employer.FieldWallet, employer.FieldCreatedBy, employer.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case employer.FieldCreatedAt, employer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EMPLOYER", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EMPLOYER fields.
func (e *EMPLOYER) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case employer.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				e.Username = value.String
			}
		case employer.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				e.Password = value.String
			}
		case employer.FieldGid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gid", values[i])
			} else if value.Valid {
				e.Gid = value.String
			}
		case employer.FieldCorpName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corp_name", values[i])
			} else if value.Valid {
				e.CorpName = value.String
			}
		case employer.FieldCorpEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corp_email", values[i])
			} else if value.Valid {
				e.CorpEmail = value.String
			}
		case employer.FieldWallet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet", values[i])
			} else if value.Valid {
				e.Wallet = value.String
			}
		case employer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case employer.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case employer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case employer.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = value.String
			}
		}
	}
	return nil
}

// QueryEmployerOfEmployee queries the "employer_of_employee" edge of the EMPLOYER entity.
func (e *EMPLOYER) QueryEmployerOfEmployee() *EMPLOYEEQuery {
	return (&EMPLOYERClient{config: e.config}).QueryEmployerOfEmployee(e)
}

// Update returns a builder for updating this EMPLOYER.
// Note that you need to call EMPLOYER.Unwrap() before calling this method if this EMPLOYER
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *EMPLOYER) Update() *EMPLOYERUpdateOne {
	return (&EMPLOYERClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the EMPLOYER entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *EMPLOYER) Unwrap() *EMPLOYER {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: EMPLOYER is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *EMPLOYER) String() string {
	var builder strings.Builder
	builder.WriteString("EMPLOYER(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("username=")
	builder.WriteString(e.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(e.Password)
	builder.WriteString(", ")
	builder.WriteString("gid=")
	builder.WriteString(e.Gid)
	builder.WriteString(", ")
	builder.WriteString("corp_name=")
	builder.WriteString(e.CorpName)
	builder.WriteString(", ")
	builder.WriteString("corp_email=")
	builder.WriteString(e.CorpEmail)
	builder.WriteString(", ")
	builder.WriteString("wallet=")
	builder.WriteString(e.Wallet)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(e.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// EMPLOYERs is a parsable slice of EMPLOYER.
type EMPLOYERs []*EMPLOYER

func (e EMPLOYERs) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
