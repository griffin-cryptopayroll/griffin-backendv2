// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/tr_log"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrLogCreate is the builder for creating a Tr_log entity.
type TrLogCreate struct {
	config
	mutation *TrLogMutation
	hooks    []Hook
}

// SetTrType sets the "tr_type" field.
func (tlc *TrLogCreate) SetTrType(s string) *TrLogCreate {
	tlc.mutation.SetTrType(s)
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TrLogCreate) SetCreatedAt(t time.Time) *TrLogCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetID sets the "id" field.
func (tlc *TrLogCreate) SetID(i int) *TrLogCreate {
	tlc.mutation.SetID(i)
	return tlc
}

// Mutation returns the TrLogMutation object of the builder.
func (tlc *TrLogCreate) Mutation() *TrLogMutation {
	return tlc.mutation
}

// Save creates the Tr_log in the database.
func (tlc *TrLogCreate) Save(ctx context.Context) (*Tr_log, error) {
	var (
		err  error
		node *Tr_log
	)
	if len(tlc.hooks) == 0 {
		if err = tlc.check(); err != nil {
			return nil, err
		}
		node, err = tlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlc.check(); err != nil {
				return nil, err
			}
			tlc.mutation = mutation
			if node, err = tlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tlc.hooks) - 1; i >= 0; i-- {
			if tlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tlc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tr_log)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TrLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TrLogCreate) SaveX(ctx context.Context) *Tr_log {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TrLogCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TrLogCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TrLogCreate) check() error {
	if _, ok := tlc.mutation.TrType(); !ok {
		return &ValidationError{Name: "tr_type", err: errors.New(`ent: missing required field "Tr_log.tr_type"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tr_log.created_at"`)}
	}
	return nil
}

func (tlc *TrLogCreate) sqlSave(ctx context.Context) (*Tr_log, error) {
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (tlc *TrLogCreate) createSpec() (*Tr_log, *sqlgraph.CreateSpec) {
	var (
		_node = &Tr_log{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tr_log.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tr_log.FieldID,
			},
		}
	)
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tlc.mutation.TrType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tr_log.FieldTrType,
		})
		_node.TrType = value
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tr_log.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// TrLogCreateBulk is the builder for creating many Tr_log entities in bulk.
type TrLogCreateBulk struct {
	config
	builders []*TrLogCreate
}

// Save creates the Tr_log entities in the database.
func (tlcb *TrLogCreateBulk) Save(ctx context.Context) ([]*Tr_log, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*Tr_log, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TrLogCreateBulk) SaveX(ctx context.Context) []*Tr_log {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TrLogCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TrLogCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
