// Code generated by ent, DO NOT EDIT.

package employer

const (
	// Label holds the string label denoting the employer type in the database.
	Label = "employer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldGid holds the string denoting the gid field in the database.
	FieldGid = "gid"
	// FieldCorpName holds the string denoting the corp_name field in the database.
	FieldCorpName = "corp_name"
	// FieldCorpEmail holds the string denoting the corp_email field in the database.
	FieldCorpEmail = "corp_email"
	// FieldWallet holds the string denoting the wallet field in the database.
	FieldWallet = "wallet"
	// FieldWalletAztec holds the string denoting the wallet_aztec field in the database.
	FieldWalletAztec = "wallet_aztec"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgeEmployerOfEmployee holds the string denoting the employer_of_employee edge name in mutations.
	EdgeEmployerOfEmployee = "employer_of_employee"
	// EdgeEmployerOfPaymentHistory holds the string denoting the employer_of_payment_history edge name in mutations.
	EdgeEmployerOfPaymentHistory = "employer_of_payment_history"
	// EdgeEmployerOfPayment holds the string denoting the employer_of_payment edge name in mutations.
	EdgeEmployerOfPayment = "employer_of_payment"
	// Table holds the table name of the employer in the database.
	Table = "employer"
	// EmployerOfEmployeeTable is the table that holds the employer_of_employee relation/edge.
	EmployerOfEmployeeTable = "employee"
	// EmployerOfEmployeeInverseTable is the table name for the EMPLOYEE entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployerOfEmployeeInverseTable = "employee"
	// EmployerOfEmployeeColumn is the table column denoting the employer_of_employee relation/edge.
	EmployerOfEmployeeColumn = "employer_id"
	// EmployerOfPaymentHistoryTable is the table that holds the employer_of_payment_history relation/edge.
	EmployerOfPaymentHistoryTable = "payment_history"
	// EmployerOfPaymentHistoryInverseTable is the table name for the PAYMENT_HISTORY entity.
	// It exists in this package in order to avoid circular dependency with the "payment_history" package.
	EmployerOfPaymentHistoryInverseTable = "payment_history"
	// EmployerOfPaymentHistoryColumn is the table column denoting the employer_of_payment_history relation/edge.
	EmployerOfPaymentHistoryColumn = "employer_id"
	// EmployerOfPaymentTable is the table that holds the employer_of_payment relation/edge.
	EmployerOfPaymentTable = "payment"
	// EmployerOfPaymentInverseTable is the table name for the PAYMENT entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	EmployerOfPaymentInverseTable = "payment"
	// EmployerOfPaymentColumn is the table column denoting the employer_of_payment relation/edge.
	EmployerOfPaymentColumn = "employer_id"
)

// Columns holds all SQL columns for employer fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldGid,
	FieldCorpName,
	FieldCorpEmail,
	FieldWallet,
	FieldWalletAztec,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
