// Code generated by ent, DO NOT EDIT.

package employer

import (
	"griffin-dao/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// Gid applies equality check predicate on the "gid" field. It's identical to GidEQ.
func Gid(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGid), v))
	})
}

// CorpName applies equality check predicate on the "corp_name" field. It's identical to CorpNameEQ.
func CorpName(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorpName), v))
	})
}

// CorpEmail applies equality check predicate on the "corp_email" field. It's identical to CorpEmailEQ.
func CorpEmail(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorpEmail), v))
	})
}

// Wallet applies equality check predicate on the "wallet" field. It's identical to WalletEQ.
func Wallet(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWallet), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// GidEQ applies the EQ predicate on the "gid" field.
func GidEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGid), v))
	})
}

// GidNEQ applies the NEQ predicate on the "gid" field.
func GidNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGid), v))
	})
}

// GidIn applies the In predicate on the "gid" field.
func GidIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGid), v...))
	})
}

// GidNotIn applies the NotIn predicate on the "gid" field.
func GidNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGid), v...))
	})
}

// GidGT applies the GT predicate on the "gid" field.
func GidGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGid), v))
	})
}

// GidGTE applies the GTE predicate on the "gid" field.
func GidGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGid), v))
	})
}

// GidLT applies the LT predicate on the "gid" field.
func GidLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGid), v))
	})
}

// GidLTE applies the LTE predicate on the "gid" field.
func GidLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGid), v))
	})
}

// GidContains applies the Contains predicate on the "gid" field.
func GidContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGid), v))
	})
}

// GidHasPrefix applies the HasPrefix predicate on the "gid" field.
func GidHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGid), v))
	})
}

// GidHasSuffix applies the HasSuffix predicate on the "gid" field.
func GidHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGid), v))
	})
}

// GidEqualFold applies the EqualFold predicate on the "gid" field.
func GidEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGid), v))
	})
}

// GidContainsFold applies the ContainsFold predicate on the "gid" field.
func GidContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGid), v))
	})
}

// CorpNameEQ applies the EQ predicate on the "corp_name" field.
func CorpNameEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorpName), v))
	})
}

// CorpNameNEQ applies the NEQ predicate on the "corp_name" field.
func CorpNameNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCorpName), v))
	})
}

// CorpNameIn applies the In predicate on the "corp_name" field.
func CorpNameIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCorpName), v...))
	})
}

// CorpNameNotIn applies the NotIn predicate on the "corp_name" field.
func CorpNameNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCorpName), v...))
	})
}

// CorpNameGT applies the GT predicate on the "corp_name" field.
func CorpNameGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCorpName), v))
	})
}

// CorpNameGTE applies the GTE predicate on the "corp_name" field.
func CorpNameGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCorpName), v))
	})
}

// CorpNameLT applies the LT predicate on the "corp_name" field.
func CorpNameLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCorpName), v))
	})
}

// CorpNameLTE applies the LTE predicate on the "corp_name" field.
func CorpNameLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCorpName), v))
	})
}

// CorpNameContains applies the Contains predicate on the "corp_name" field.
func CorpNameContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCorpName), v))
	})
}

// CorpNameHasPrefix applies the HasPrefix predicate on the "corp_name" field.
func CorpNameHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCorpName), v))
	})
}

// CorpNameHasSuffix applies the HasSuffix predicate on the "corp_name" field.
func CorpNameHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCorpName), v))
	})
}

// CorpNameEqualFold applies the EqualFold predicate on the "corp_name" field.
func CorpNameEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCorpName), v))
	})
}

// CorpNameContainsFold applies the ContainsFold predicate on the "corp_name" field.
func CorpNameContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCorpName), v))
	})
}

// CorpEmailEQ applies the EQ predicate on the "corp_email" field.
func CorpEmailEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailNEQ applies the NEQ predicate on the "corp_email" field.
func CorpEmailNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailIn applies the In predicate on the "corp_email" field.
func CorpEmailIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCorpEmail), v...))
	})
}

// CorpEmailNotIn applies the NotIn predicate on the "corp_email" field.
func CorpEmailNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCorpEmail), v...))
	})
}

// CorpEmailGT applies the GT predicate on the "corp_email" field.
func CorpEmailGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailGTE applies the GTE predicate on the "corp_email" field.
func CorpEmailGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailLT applies the LT predicate on the "corp_email" field.
func CorpEmailLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailLTE applies the LTE predicate on the "corp_email" field.
func CorpEmailLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailContains applies the Contains predicate on the "corp_email" field.
func CorpEmailContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailHasPrefix applies the HasPrefix predicate on the "corp_email" field.
func CorpEmailHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailHasSuffix applies the HasSuffix predicate on the "corp_email" field.
func CorpEmailHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailEqualFold applies the EqualFold predicate on the "corp_email" field.
func CorpEmailEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCorpEmail), v))
	})
}

// CorpEmailContainsFold applies the ContainsFold predicate on the "corp_email" field.
func CorpEmailContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCorpEmail), v))
	})
}

// WalletEQ applies the EQ predicate on the "wallet" field.
func WalletEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWallet), v))
	})
}

// WalletNEQ applies the NEQ predicate on the "wallet" field.
func WalletNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWallet), v))
	})
}

// WalletIn applies the In predicate on the "wallet" field.
func WalletIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWallet), v...))
	})
}

// WalletNotIn applies the NotIn predicate on the "wallet" field.
func WalletNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWallet), v...))
	})
}

// WalletGT applies the GT predicate on the "wallet" field.
func WalletGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWallet), v))
	})
}

// WalletGTE applies the GTE predicate on the "wallet" field.
func WalletGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWallet), v))
	})
}

// WalletLT applies the LT predicate on the "wallet" field.
func WalletLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWallet), v))
	})
}

// WalletLTE applies the LTE predicate on the "wallet" field.
func WalletLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWallet), v))
	})
}

// WalletContains applies the Contains predicate on the "wallet" field.
func WalletContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWallet), v))
	})
}

// WalletHasPrefix applies the HasPrefix predicate on the "wallet" field.
func WalletHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWallet), v))
	})
}

// WalletHasSuffix applies the HasSuffix predicate on the "wallet" field.
func WalletHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWallet), v))
	})
}

// WalletEqualFold applies the EqualFold predicate on the "wallet" field.
func WalletEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWallet), v))
	})
}

// WalletContainsFold applies the ContainsFold predicate on the "wallet" field.
func WalletContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWallet), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.EMPLOYER {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedBy), v))
	})
}

// HasEmployerOfEmployee applies the HasEdge predicate on the "employer_of_employee" edge.
func HasEmployerOfEmployee() predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployerOfEmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployerOfEmployeeTable, EmployerOfEmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployerOfEmployeeWith applies the HasEdge predicate on the "employer_of_employee" edge with a given conditions (other predicates).
func HasEmployerOfEmployeeWith(preds ...predicate.EMPLOYEE) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployerOfEmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployerOfEmployeeTable, EmployerOfEmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployerOfPaymentHistory applies the HasEdge predicate on the "employer_of_payment_history" edge.
func HasEmployerOfPaymentHistory() predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployerOfPaymentHistoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployerOfPaymentHistoryTable, EmployerOfPaymentHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployerOfPaymentHistoryWith applies the HasEdge predicate on the "employer_of_payment_history" edge with a given conditions (other predicates).
func HasEmployerOfPaymentHistoryWith(preds ...predicate.PAYMENT_HISTORY) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployerOfPaymentHistoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployerOfPaymentHistoryTable, EmployerOfPaymentHistoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployerOfPayment applies the HasEdge predicate on the "employer_of_payment" edge.
func HasEmployerOfPayment() predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployerOfPaymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployerOfPaymentTable, EmployerOfPaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployerOfPaymentWith applies the HasEdge predicate on the "employer_of_payment" edge with a given conditions (other predicates).
func HasEmployerOfPaymentWith(preds ...predicate.PAYMENT) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployerOfPaymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployerOfPaymentTable, EmployerOfPaymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EMPLOYER) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EMPLOYER) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EMPLOYER) predicate.EMPLOYER {
	return predicate.EMPLOYER(func(s *sql.Selector) {
		p(s.Not())
	})
}
