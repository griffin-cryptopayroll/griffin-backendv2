// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/employ_type"
	"griffin-dao/ent/employee"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EMPLOYTYPECreate is the builder for creating a EMPLOY_TYPE entity.
type EMPLOYTYPECreate struct {
	config
	mutation *EMPLOYTYPEMutation
	hooks    []Hook
}

// SetIsPermanent sets the "is_permanent" field.
func (ec *EMPLOYTYPECreate) SetIsPermanent(s string) *EMPLOYTYPECreate {
	ec.mutation.SetIsPermanent(s)
	return ec
}

// SetContractPeriod sets the "contract_period" field.
func (ec *EMPLOYTYPECreate) SetContractPeriod(i int) *EMPLOYTYPECreate {
	ec.mutation.SetContractPeriod(i)
	return ec
}

// SetID sets the "id" field.
func (ec *EMPLOYTYPECreate) SetID(i int) *EMPLOYTYPECreate {
	ec.mutation.SetID(i)
	return ec
}

// AddEmployeeTypeToIDs adds the "employee_type_to" edge to the EMPLOYEE entity by IDs.
func (ec *EMPLOYTYPECreate) AddEmployeeTypeToIDs(ids ...int) *EMPLOYTYPECreate {
	ec.mutation.AddEmployeeTypeToIDs(ids...)
	return ec
}

// AddEmployeeTypeTo adds the "employee_type_to" edges to the EMPLOYEE entity.
func (ec *EMPLOYTYPECreate) AddEmployeeTypeTo(e ...*EMPLOYEE) *EMPLOYTYPECreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEmployeeTypeToIDs(ids...)
}

// Mutation returns the EMPLOYTYPEMutation object of the builder.
func (ec *EMPLOYTYPECreate) Mutation() *EMPLOYTYPEMutation {
	return ec.mutation
}

// Save creates the EMPLOY_TYPE in the database.
func (ec *EMPLOYTYPECreate) Save(ctx context.Context) (*EMPLOY_TYPE, error) {
	var (
		err  error
		node *EMPLOY_TYPE
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EMPLOYTYPEMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EMPLOY_TYPE)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EMPLOYTYPEMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EMPLOYTYPECreate) SaveX(ctx context.Context) *EMPLOY_TYPE {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EMPLOYTYPECreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EMPLOYTYPECreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EMPLOYTYPECreate) check() error {
	if _, ok := ec.mutation.IsPermanent(); !ok {
		return &ValidationError{Name: "is_permanent", err: errors.New(`ent: missing required field "EMPLOY_TYPE.is_permanent"`)}
	}
	if _, ok := ec.mutation.ContractPeriod(); !ok {
		return &ValidationError{Name: "contract_period", err: errors.New(`ent: missing required field "EMPLOY_TYPE.contract_period"`)}
	}
	return nil
}

func (ec *EMPLOYTYPECreate) sqlSave(ctx context.Context) (*EMPLOY_TYPE, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ec *EMPLOYTYPECreate) createSpec() (*EMPLOY_TYPE, *sqlgraph.CreateSpec) {
	var (
		_node = &EMPLOY_TYPE{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: employ_type.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employ_type.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.IsPermanent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employ_type.FieldIsPermanent,
		})
		_node.IsPermanent = value
	}
	if value, ok := ec.mutation.ContractPeriod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: employ_type.FieldContractPeriod,
		})
		_node.ContractPeriod = value
	}
	if nodes := ec.mutation.EmployeeTypeToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employ_type.EmployeeTypeToTable,
			Columns: []string{employ_type.EmployeeTypeToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EMPLOYTYPECreateBulk is the builder for creating many EMPLOY_TYPE entities in bulk.
type EMPLOYTYPECreateBulk struct {
	config
	builders []*EMPLOYTYPECreate
}

// Save creates the EMPLOY_TYPE entities in the database.
func (ecb *EMPLOYTYPECreateBulk) Save(ctx context.Context) ([]*EMPLOY_TYPE, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*EMPLOY_TYPE, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EMPLOYTYPEMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EMPLOYTYPECreateBulk) SaveX(ctx context.Context) []*EMPLOY_TYPE {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EMPLOYTYPECreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EMPLOYTYPECreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
