// Code generated by ent, DO NOT EDIT.

package crypto_currency

import (
	"griffin-dao/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Ticker applies equality check predicate on the "ticker" field. It's identical to TickerEQ.
func Ticker(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicker), v))
	})
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceID), v))
	})
}

// TickerEQ applies the EQ predicate on the "ticker" field.
func TickerEQ(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicker), v))
	})
}

// TickerNEQ applies the NEQ predicate on the "ticker" field.
func TickerNEQ(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTicker), v))
	})
}

// TickerIn applies the In predicate on the "ticker" field.
func TickerIn(vs ...string) predicate.CRYPTO_CURRENCY {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTicker), v...))
	})
}

// TickerNotIn applies the NotIn predicate on the "ticker" field.
func TickerNotIn(vs ...string) predicate.CRYPTO_CURRENCY {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTicker), v...))
	})
}

// TickerGT applies the GT predicate on the "ticker" field.
func TickerGT(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTicker), v))
	})
}

// TickerGTE applies the GTE predicate on the "ticker" field.
func TickerGTE(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTicker), v))
	})
}

// TickerLT applies the LT predicate on the "ticker" field.
func TickerLT(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTicker), v))
	})
}

// TickerLTE applies the LTE predicate on the "ticker" field.
func TickerLTE(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTicker), v))
	})
}

// TickerContains applies the Contains predicate on the "ticker" field.
func TickerContains(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTicker), v))
	})
}

// TickerHasPrefix applies the HasPrefix predicate on the "ticker" field.
func TickerHasPrefix(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTicker), v))
	})
}

// TickerHasSuffix applies the HasSuffix predicate on the "ticker" field.
func TickerHasSuffix(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTicker), v))
	})
}

// TickerEqualFold applies the EqualFold predicate on the "ticker" field.
func TickerEqualFold(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTicker), v))
	})
}

// TickerContainsFold applies the ContainsFold predicate on the "ticker" field.
func TickerContainsFold(v string) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTicker), v))
	})
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceID), v))
	})
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceID), v))
	})
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int) predicate.CRYPTO_CURRENCY {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSourceID), v...))
	})
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int) predicate.CRYPTO_CURRENCY {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSourceID), v...))
	})
}

// SourceIDIsNil applies the IsNil predicate on the "source_id" field.
func SourceIDIsNil() predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceID)))
	})
}

// SourceIDNotNil applies the NotNil predicate on the "source_id" field.
func SourceIDNotNil() predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceID)))
	})
}

// HasCurrencyFromSource applies the HasEdge predicate on the "currency_from_source" edge.
func HasCurrencyFromSource() predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrencyFromSourceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyFromSourceTable, CurrencyFromSourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyFromSourceWith applies the HasEdge predicate on the "currency_from_source" edge with a given conditions (other predicates).
func HasCurrencyFromSourceWith(preds ...predicate.CRYPTO_PRC_SOURCE) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrencyFromSourceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CurrencyFromSourceTable, CurrencyFromSourceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrencyOfEmployee applies the HasEdge predicate on the "currency_of_employee" edge.
func HasCurrencyOfEmployee() predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrencyOfEmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrencyOfEmployeeTable, CurrencyOfEmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyOfEmployeeWith applies the HasEdge predicate on the "currency_of_employee" edge with a given conditions (other predicates).
func HasCurrencyOfEmployeeWith(preds ...predicate.EMPLOYEE) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrencyOfEmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrencyOfEmployeeTable, CurrencyOfEmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrencyOfPaymentHistory applies the HasEdge predicate on the "currency_of_payment_history" edge.
func HasCurrencyOfPaymentHistory() predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrencyOfPaymentHistoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrencyOfPaymentHistoryTable, CurrencyOfPaymentHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyOfPaymentHistoryWith applies the HasEdge predicate on the "currency_of_payment_history" edge with a given conditions (other predicates).
func HasCurrencyOfPaymentHistoryWith(preds ...predicate.PAYMENT_HISTORY) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrencyOfPaymentHistoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrencyOfPaymentHistoryTable, CurrencyOfPaymentHistoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CRYPTO_CURRENCY) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CRYPTO_CURRENCY) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CRYPTO_CURRENCY) predicate.CRYPTO_CURRENCY {
	return predicate.CRYPTO_CURRENCY(func(s *sql.Selector) {
		p(s.Not())
	})
}
