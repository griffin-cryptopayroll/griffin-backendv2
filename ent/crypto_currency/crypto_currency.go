// Code generated by ent, DO NOT EDIT.

package crypto_currency

const (
	// Label holds the string label denoting the crypto_currency type in the database.
	Label = "crypto_currency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTicker holds the string denoting the ticker field in the database.
	FieldTicker = "ticker"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// EdgeSourceOf holds the string denoting the source_of edge name in mutations.
	EdgeSourceOf = "source_of"
	// EdgeEmployeePaid holds the string denoting the employee_paid edge name in mutations.
	EdgeEmployeePaid = "employee_paid"
	// Table holds the table name of the crypto_currency in the database.
	Table = "crypto_currency"
	// SourceOfTable is the table that holds the source_of relation/edge.
	SourceOfTable = "crypto_currency"
	// SourceOfInverseTable is the table name for the CRYPTO_PRC_SOURCE entity.
	// It exists in this package in order to avoid circular dependency with the "crypto_prc_source" package.
	SourceOfInverseTable = "crypto_prc_source"
	// SourceOfColumn is the table column denoting the source_of relation/edge.
	SourceOfColumn = "crypto_prc_source_price_of"
	// EmployeePaidTable is the table that holds the employee_paid relation/edge.
	EmployeePaidTable = "employee"
	// EmployeePaidInverseTable is the table name for the EMPLOYEE entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeePaidInverseTable = "employee"
	// EmployeePaidColumn is the table column denoting the employee_paid relation/edge.
	EmployeePaidColumn = "crypto_currency_employee_paid"
)

// Columns holds all SQL columns for crypto_currency fields.
var Columns = []string{
	FieldID,
	FieldTicker,
	FieldSource,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "crypto_currency"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"crypto_prc_source_price_of",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
