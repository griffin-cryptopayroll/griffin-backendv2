// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"griffin-dao/ent/crypto_currency"
	"griffin-dao/ent/employ_type"
	"griffin-dao/ent/employee"
	"griffin-dao/ent/employer"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EMPLOYEE is the model entity for the EMPLOYEE schema.
type EMPLOYEE struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Gid holds the value of the "gid" field.
	Gid string `json:"gid,omitempty"`
	// EmployerID holds the value of the "employer_id" field.
	EmployerID int `json:"employer_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Wallet holds the value of the "wallet" field.
	Wallet string `json:"wallet,omitempty"`
	// Payroll holds the value of the "payroll" field.
	Payroll float64 `json:"payroll,omitempty"`
	// CryptoCurrencyID holds the value of the "crypto_currency_id" field.
	CryptoCurrencyID int `json:"crypto_currency_id,omitempty"`
	// Payday holds the value of the "payday" field.
	Payday time.Time `json:"payday,omitempty"`
	// EmployTypeID holds the value of the "employ_type_id" field.
	EmployTypeID int `json:"employ_type_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// WorkStart holds the value of the "work_start" field.
	WorkStart string `json:"work_start,omitempty"`
	// WorkEnds holds the value of the "work_ends" field.
	WorkEnds string `json:"work_ends,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EMPLOYEEQuery when eager-loading is set.
	Edges EMPLOYEEEdges `json:"edges"`
}

// EMPLOYEEEdges holds the relations/edges for other nodes in the graph.
type EMPLOYEEEdges struct {
	// EmployeeFromCurrency holds the value of the employee_from_currency edge.
	EmployeeFromCurrency *CRYPTO_CURRENCY `json:"employee_from_currency,omitempty"`
	// EmployeeFromEmployType holds the value of the employee_from_employ_type edge.
	EmployeeFromEmployType *EMPLOY_TYPE `json:"employee_from_employ_type,omitempty"`
	// EmployeeFromEmployer holds the value of the employee_from_employer edge.
	EmployeeFromEmployer *EMPLOYER `json:"employee_from_employer,omitempty"`
	// EmployeeOfPaymentHistory holds the value of the employee_of_payment_history edge.
	EmployeeOfPaymentHistory []*PAYMENT_HISTORY `json:"employee_of_payment_history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EmployeeFromCurrencyOrErr returns the EmployeeFromCurrency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EMPLOYEEEdges) EmployeeFromCurrencyOrErr() (*CRYPTO_CURRENCY, error) {
	if e.loadedTypes[0] {
		if e.EmployeeFromCurrency == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: crypto_currency.Label}
		}
		return e.EmployeeFromCurrency, nil
	}
	return nil, &NotLoadedError{edge: "employee_from_currency"}
}

// EmployeeFromEmployTypeOrErr returns the EmployeeFromEmployType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EMPLOYEEEdges) EmployeeFromEmployTypeOrErr() (*EMPLOY_TYPE, error) {
	if e.loadedTypes[1] {
		if e.EmployeeFromEmployType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employ_type.Label}
		}
		return e.EmployeeFromEmployType, nil
	}
	return nil, &NotLoadedError{edge: "employee_from_employ_type"}
}

// EmployeeFromEmployerOrErr returns the EmployeeFromEmployer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EMPLOYEEEdges) EmployeeFromEmployerOrErr() (*EMPLOYER, error) {
	if e.loadedTypes[2] {
		if e.EmployeeFromEmployer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employer.Label}
		}
		return e.EmployeeFromEmployer, nil
	}
	return nil, &NotLoadedError{edge: "employee_from_employer"}
}

// EmployeeOfPaymentHistoryOrErr returns the EmployeeOfPaymentHistory value or an error if the edge
// was not loaded in eager-loading.
func (e EMPLOYEEEdges) EmployeeOfPaymentHistoryOrErr() ([]*PAYMENT_HISTORY, error) {
	if e.loadedTypes[3] {
		return e.EmployeeOfPaymentHistory, nil
	}
	return nil, &NotLoadedError{edge: "employee_of_payment_history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EMPLOYEE) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case employee.FieldPayroll:
			values[i] = new(sql.NullFloat64)
		case employee.FieldID, employee.FieldEmployerID, employee.FieldCryptoCurrencyID, employee.FieldEmployTypeID:
			values[i] = new(sql.NullInt64)
		case employee.FieldGid, employee.FieldName, employee.FieldPosition, employee.FieldWallet, employee.FieldEmail, employee.FieldWorkStart, employee.FieldWorkEnds, employee.FieldCreatedBy, employee.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case employee.FieldPayday, employee.FieldCreatedAt, employee.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EMPLOYEE", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EMPLOYEE fields.
func (e *EMPLOYEE) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case employee.FieldGid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gid", values[i])
			} else if value.Valid {
				e.Gid = value.String
			}
		case employee.FieldEmployerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employer_id", values[i])
			} else if value.Valid {
				e.EmployerID = int(value.Int64)
			}
		case employee.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case employee.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				e.Position = value.String
			}
		case employee.FieldWallet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet", values[i])
			} else if value.Valid {
				e.Wallet = value.String
			}
		case employee.FieldPayroll:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field payroll", values[i])
			} else if value.Valid {
				e.Payroll = value.Float64
			}
		case employee.FieldCryptoCurrencyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field crypto_currency_id", values[i])
			} else if value.Valid {
				e.CryptoCurrencyID = int(value.Int64)
			}
		case employee.FieldPayday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field payday", values[i])
			} else if value.Valid {
				e.Payday = value.Time
			}
		case employee.FieldEmployTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employ_type_id", values[i])
			} else if value.Valid {
				e.EmployTypeID = int(value.Int64)
			}
		case employee.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				e.Email = value.String
			}
		case employee.FieldWorkStart:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field work_start", values[i])
			} else if value.Valid {
				e.WorkStart = value.String
			}
		case employee.FieldWorkEnds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field work_ends", values[i])
			} else if value.Valid {
				e.WorkEnds = value.String
			}
		case employee.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case employee.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case employee.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case employee.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = value.String
			}
		}
	}
	return nil
}

// QueryEmployeeFromCurrency queries the "employee_from_currency" edge of the EMPLOYEE entity.
func (e *EMPLOYEE) QueryEmployeeFromCurrency() *CRYPTOCURRENCYQuery {
	return (&EMPLOYEEClient{config: e.config}).QueryEmployeeFromCurrency(e)
}

// QueryEmployeeFromEmployType queries the "employee_from_employ_type" edge of the EMPLOYEE entity.
func (e *EMPLOYEE) QueryEmployeeFromEmployType() *EMPLOYTYPEQuery {
	return (&EMPLOYEEClient{config: e.config}).QueryEmployeeFromEmployType(e)
}

// QueryEmployeeFromEmployer queries the "employee_from_employer" edge of the EMPLOYEE entity.
func (e *EMPLOYEE) QueryEmployeeFromEmployer() *EMPLOYERQuery {
	return (&EMPLOYEEClient{config: e.config}).QueryEmployeeFromEmployer(e)
}

// QueryEmployeeOfPaymentHistory queries the "employee_of_payment_history" edge of the EMPLOYEE entity.
func (e *EMPLOYEE) QueryEmployeeOfPaymentHistory() *PAYMENTHISTORYQuery {
	return (&EMPLOYEEClient{config: e.config}).QueryEmployeeOfPaymentHistory(e)
}

// Update returns a builder for updating this EMPLOYEE.
// Note that you need to call EMPLOYEE.Unwrap() before calling this method if this EMPLOYEE
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *EMPLOYEE) Update() *EMPLOYEEUpdateOne {
	return (&EMPLOYEEClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the EMPLOYEE entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *EMPLOYEE) Unwrap() *EMPLOYEE {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: EMPLOYEE is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *EMPLOYEE) String() string {
	var builder strings.Builder
	builder.WriteString("EMPLOYEE(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("gid=")
	builder.WriteString(e.Gid)
	builder.WriteString(", ")
	builder.WriteString("employer_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployerID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(e.Position)
	builder.WriteString(", ")
	builder.WriteString("wallet=")
	builder.WriteString(e.Wallet)
	builder.WriteString(", ")
	builder.WriteString("payroll=")
	builder.WriteString(fmt.Sprintf("%v", e.Payroll))
	builder.WriteString(", ")
	builder.WriteString("crypto_currency_id=")
	builder.WriteString(fmt.Sprintf("%v", e.CryptoCurrencyID))
	builder.WriteString(", ")
	builder.WriteString("payday=")
	builder.WriteString(e.Payday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("employ_type_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployTypeID))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(e.Email)
	builder.WriteString(", ")
	builder.WriteString("work_start=")
	builder.WriteString(e.WorkStart)
	builder.WriteString(", ")
	builder.WriteString("work_ends=")
	builder.WriteString(e.WorkEnds)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(e.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// EMPLOYEEs is a parsable slice of EMPLOYEE.
type EMPLOYEEs []*EMPLOYEE

func (e EMPLOYEEs) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
