// Code generated by ent, DO NOT EDIT.

package employee

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGid holds the string denoting the gid field in the database.
	FieldGid = "gid"
	// FieldEmployerID holds the string denoting the employer_id field in the database.
	FieldEmployerID = "employer_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldWallet holds the string denoting the wallet field in the database.
	FieldWallet = "wallet"
	// FieldPayroll holds the string denoting the payroll field in the database.
	FieldPayroll = "payroll"
	// FieldCryptoCurrencyID holds the string denoting the crypto_currency_id field in the database.
	FieldCryptoCurrencyID = "crypto_currency_id"
	// FieldPayday holds the string denoting the payday field in the database.
	FieldPayday = "payday"
	// FieldEmployTypeID holds the string denoting the employ_type_id field in the database.
	FieldEmployTypeID = "employ_type_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldWorkStart holds the string denoting the work_start field in the database.
	FieldWorkStart = "work_start"
	// FieldWorkEnds holds the string denoting the work_ends field in the database.
	FieldWorkEnds = "work_ends"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgeEmployeeFromCurrency holds the string denoting the employee_from_currency edge name in mutations.
	EdgeEmployeeFromCurrency = "employee_from_currency"
	// EdgeEmployeeFromEmployType holds the string denoting the employee_from_employ_type edge name in mutations.
	EdgeEmployeeFromEmployType = "employee_from_employ_type"
	// EdgeEmployeeFromEmployer holds the string denoting the employee_from_employer edge name in mutations.
	EdgeEmployeeFromEmployer = "employee_from_employer"
	// EdgeEmployeeOfPaymentHistory holds the string denoting the employee_of_payment_history edge name in mutations.
	EdgeEmployeeOfPaymentHistory = "employee_of_payment_history"
	// Table holds the table name of the employee in the database.
	Table = "employee"
	// EmployeeFromCurrencyTable is the table that holds the employee_from_currency relation/edge.
	EmployeeFromCurrencyTable = "employee"
	// EmployeeFromCurrencyInverseTable is the table name for the CRYPTO_CURRENCY entity.
	// It exists in this package in order to avoid circular dependency with the "crypto_currency" package.
	EmployeeFromCurrencyInverseTable = "crypto_currency"
	// EmployeeFromCurrencyColumn is the table column denoting the employee_from_currency relation/edge.
	EmployeeFromCurrencyColumn = "crypto_currency_id"
	// EmployeeFromEmployTypeTable is the table that holds the employee_from_employ_type relation/edge.
	EmployeeFromEmployTypeTable = "employee"
	// EmployeeFromEmployTypeInverseTable is the table name for the EMPLOY_TYPE entity.
	// It exists in this package in order to avoid circular dependency with the "employ_type" package.
	EmployeeFromEmployTypeInverseTable = "employ_type"
	// EmployeeFromEmployTypeColumn is the table column denoting the employee_from_employ_type relation/edge.
	EmployeeFromEmployTypeColumn = "employ_type_id"
	// EmployeeFromEmployerTable is the table that holds the employee_from_employer relation/edge.
	EmployeeFromEmployerTable = "employee"
	// EmployeeFromEmployerInverseTable is the table name for the EMPLOYER entity.
	// It exists in this package in order to avoid circular dependency with the "employer" package.
	EmployeeFromEmployerInverseTable = "employer"
	// EmployeeFromEmployerColumn is the table column denoting the employee_from_employer relation/edge.
	EmployeeFromEmployerColumn = "employer_id"
	// EmployeeOfPaymentHistoryTable is the table that holds the employee_of_payment_history relation/edge.
	EmployeeOfPaymentHistoryTable = "payment_history"
	// EmployeeOfPaymentHistoryInverseTable is the table name for the PAYMENT_HISTORY entity.
	// It exists in this package in order to avoid circular dependency with the "payment_history" package.
	EmployeeOfPaymentHistoryInverseTable = "payment_history"
	// EmployeeOfPaymentHistoryColumn is the table column denoting the employee_of_payment_history relation/edge.
	EmployeeOfPaymentHistoryColumn = "employee_id"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldGid,
	FieldEmployerID,
	FieldName,
	FieldPosition,
	FieldWallet,
	FieldPayroll,
	FieldCryptoCurrencyID,
	FieldPayday,
	FieldEmployTypeID,
	FieldEmail,
	FieldWorkStart,
	FieldWorkEnds,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedAt,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
