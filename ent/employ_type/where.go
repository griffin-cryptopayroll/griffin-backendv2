// Code generated by ent, DO NOT EDIT.

package employ_type

import (
	"griffin-dao/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IsPermanent applies equality check predicate on the "is_permanent" field. It's identical to IsPermanentEQ.
func IsPermanent(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPermanent), v))
	})
}

// PayFreq applies equality check predicate on the "pay_freq" field. It's identical to PayFreqEQ.
func PayFreq(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayFreq), v))
	})
}

// IsPermanentEQ applies the EQ predicate on the "is_permanent" field.
func IsPermanentEQ(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentNEQ applies the NEQ predicate on the "is_permanent" field.
func IsPermanentNEQ(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentIn applies the In predicate on the "is_permanent" field.
func IsPermanentIn(vs ...string) predicate.EMPLOY_TYPE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsPermanent), v...))
	})
}

// IsPermanentNotIn applies the NotIn predicate on the "is_permanent" field.
func IsPermanentNotIn(vs ...string) predicate.EMPLOY_TYPE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsPermanent), v...))
	})
}

// IsPermanentGT applies the GT predicate on the "is_permanent" field.
func IsPermanentGT(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentGTE applies the GTE predicate on the "is_permanent" field.
func IsPermanentGTE(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentLT applies the LT predicate on the "is_permanent" field.
func IsPermanentLT(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentLTE applies the LTE predicate on the "is_permanent" field.
func IsPermanentLTE(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentContains applies the Contains predicate on the "is_permanent" field.
func IsPermanentContains(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentHasPrefix applies the HasPrefix predicate on the "is_permanent" field.
func IsPermanentHasPrefix(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentHasSuffix applies the HasSuffix predicate on the "is_permanent" field.
func IsPermanentHasSuffix(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentEqualFold applies the EqualFold predicate on the "is_permanent" field.
func IsPermanentEqualFold(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsPermanent), v))
	})
}

// IsPermanentContainsFold applies the ContainsFold predicate on the "is_permanent" field.
func IsPermanentContainsFold(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsPermanent), v))
	})
}

// PayFreqEQ applies the EQ predicate on the "pay_freq" field.
func PayFreqEQ(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayFreq), v))
	})
}

// PayFreqNEQ applies the NEQ predicate on the "pay_freq" field.
func PayFreqNEQ(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayFreq), v))
	})
}

// PayFreqIn applies the In predicate on the "pay_freq" field.
func PayFreqIn(vs ...string) predicate.EMPLOY_TYPE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPayFreq), v...))
	})
}

// PayFreqNotIn applies the NotIn predicate on the "pay_freq" field.
func PayFreqNotIn(vs ...string) predicate.EMPLOY_TYPE {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPayFreq), v...))
	})
}

// PayFreqGT applies the GT predicate on the "pay_freq" field.
func PayFreqGT(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayFreq), v))
	})
}

// PayFreqGTE applies the GTE predicate on the "pay_freq" field.
func PayFreqGTE(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayFreq), v))
	})
}

// PayFreqLT applies the LT predicate on the "pay_freq" field.
func PayFreqLT(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayFreq), v))
	})
}

// PayFreqLTE applies the LTE predicate on the "pay_freq" field.
func PayFreqLTE(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayFreq), v))
	})
}

// PayFreqContains applies the Contains predicate on the "pay_freq" field.
func PayFreqContains(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayFreq), v))
	})
}

// PayFreqHasPrefix applies the HasPrefix predicate on the "pay_freq" field.
func PayFreqHasPrefix(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayFreq), v))
	})
}

// PayFreqHasSuffix applies the HasSuffix predicate on the "pay_freq" field.
func PayFreqHasSuffix(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayFreq), v))
	})
}

// PayFreqEqualFold applies the EqualFold predicate on the "pay_freq" field.
func PayFreqEqualFold(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayFreq), v))
	})
}

// PayFreqContainsFold applies the ContainsFold predicate on the "pay_freq" field.
func PayFreqContainsFold(v string) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayFreq), v))
	})
}

// HasEmployeeTypeTo applies the HasEdge predicate on the "employee_type_to" edge.
func HasEmployeeTypeTo() predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTypeToTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployeeTypeToTable, EmployeeTypeToColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeTypeToWith applies the HasEdge predicate on the "employee_type_to" edge with a given conditions (other predicates).
func HasEmployeeTypeToWith(preds ...predicate.EMPLOYEE) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTypeToInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmployeeTypeToTable, EmployeeTypeToColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EMPLOY_TYPE) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EMPLOY_TYPE) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EMPLOY_TYPE) predicate.EMPLOY_TYPE {
	return predicate.EMPLOY_TYPE(func(s *sql.Selector) {
		p(s.Not())
	})
}
