// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/crypto_currency"
	"griffin-dao/ent/employee"
	"griffin-dao/ent/employer"
	"griffin-dao/ent/payment"
	"griffin-dao/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PAYMENTUpdate is the builder for updating PAYMENT entities.
type PAYMENTUpdate struct {
	config
	hooks    []Hook
	mutation *PAYMENTMutation
}

// Where appends a list predicates to the PAYMENTUpdate builder.
func (pu *PAYMENTUpdate) Where(ps ...predicate.PAYMENT) *PAYMENTUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetEmployeeID sets the "employee_id" field.
func (pu *PAYMENTUpdate) SetEmployeeID(i int) *PAYMENTUpdate {
	pu.mutation.SetEmployeeID(i)
	return pu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillableEmployeeID(i *int) *PAYMENTUpdate {
	if i != nil {
		pu.SetEmployeeID(*i)
	}
	return pu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (pu *PAYMENTUpdate) ClearEmployeeID() *PAYMENTUpdate {
	pu.mutation.ClearEmployeeID()
	return pu
}

// SetEmployerID sets the "employer_id" field.
func (pu *PAYMENTUpdate) SetEmployerID(i int) *PAYMENTUpdate {
	pu.mutation.SetEmployerID(i)
	return pu
}

// SetNillableEmployerID sets the "employer_id" field if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillableEmployerID(i *int) *PAYMENTUpdate {
	if i != nil {
		pu.SetEmployerID(*i)
	}
	return pu
}

// ClearEmployerID clears the value of the "employer_id" field.
func (pu *PAYMENTUpdate) ClearEmployerID() *PAYMENTUpdate {
	pu.mutation.ClearEmployerID()
	return pu
}

// SetPaymentScheduled sets the "payment_scheduled" field.
func (pu *PAYMENTUpdate) SetPaymentScheduled(t time.Time) *PAYMENTUpdate {
	pu.mutation.SetPaymentScheduled(t)
	return pu
}

// SetNillablePaymentScheduled sets the "payment_scheduled" field if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillablePaymentScheduled(t *time.Time) *PAYMENTUpdate {
	if t != nil {
		pu.SetPaymentScheduled(*t)
	}
	return pu
}

// ClearPaymentScheduled clears the value of the "payment_scheduled" field.
func (pu *PAYMENTUpdate) ClearPaymentScheduled() *PAYMENTUpdate {
	pu.mutation.ClearPaymentScheduled()
	return pu
}

// SetPaymentExecuted sets the "payment_executed" field.
func (pu *PAYMENTUpdate) SetPaymentExecuted(t time.Time) *PAYMENTUpdate {
	pu.mutation.SetPaymentExecuted(t)
	return pu
}

// SetNillablePaymentExecuted sets the "payment_executed" field if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillablePaymentExecuted(t *time.Time) *PAYMENTUpdate {
	if t != nil {
		pu.SetPaymentExecuted(*t)
	}
	return pu
}

// ClearPaymentExecuted clears the value of the "payment_executed" field.
func (pu *PAYMENTUpdate) ClearPaymentExecuted() *PAYMENTUpdate {
	pu.mutation.ClearPaymentExecuted()
	return pu
}

// SetPaymentAmount sets the "payment_amount" field.
func (pu *PAYMENTUpdate) SetPaymentAmount(f float64) *PAYMENTUpdate {
	pu.mutation.ResetPaymentAmount()
	pu.mutation.SetPaymentAmount(f)
	return pu
}

// AddPaymentAmount adds f to the "payment_amount" field.
func (pu *PAYMENTUpdate) AddPaymentAmount(f float64) *PAYMENTUpdate {
	pu.mutation.AddPaymentAmount(f)
	return pu
}

// SetCryptoCurrencyID sets the "crypto_currency_id" field.
func (pu *PAYMENTUpdate) SetCryptoCurrencyID(i int) *PAYMENTUpdate {
	pu.mutation.SetCryptoCurrencyID(i)
	return pu
}

// SetNillableCryptoCurrencyID sets the "crypto_currency_id" field if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillableCryptoCurrencyID(i *int) *PAYMENTUpdate {
	if i != nil {
		pu.SetCryptoCurrencyID(*i)
	}
	return pu
}

// ClearCryptoCurrencyID clears the value of the "crypto_currency_id" field.
func (pu *PAYMENTUpdate) ClearCryptoCurrencyID() *PAYMENTUpdate {
	pu.mutation.ClearCryptoCurrencyID()
	return pu
}

// SetPaymentFromEmployerID sets the "payment_from_employer" edge to the EMPLOYER entity by ID.
func (pu *PAYMENTUpdate) SetPaymentFromEmployerID(id int) *PAYMENTUpdate {
	pu.mutation.SetPaymentFromEmployerID(id)
	return pu
}

// SetNillablePaymentFromEmployerID sets the "payment_from_employer" edge to the EMPLOYER entity by ID if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillablePaymentFromEmployerID(id *int) *PAYMENTUpdate {
	if id != nil {
		pu = pu.SetPaymentFromEmployerID(*id)
	}
	return pu
}

// SetPaymentFromEmployer sets the "payment_from_employer" edge to the EMPLOYER entity.
func (pu *PAYMENTUpdate) SetPaymentFromEmployer(e *EMPLOYER) *PAYMENTUpdate {
	return pu.SetPaymentFromEmployerID(e.ID)
}

// SetPaymentFromEmployeeID sets the "payment_from_employee" edge to the EMPLOYEE entity by ID.
func (pu *PAYMENTUpdate) SetPaymentFromEmployeeID(id int) *PAYMENTUpdate {
	pu.mutation.SetPaymentFromEmployeeID(id)
	return pu
}

// SetNillablePaymentFromEmployeeID sets the "payment_from_employee" edge to the EMPLOYEE entity by ID if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillablePaymentFromEmployeeID(id *int) *PAYMENTUpdate {
	if id != nil {
		pu = pu.SetPaymentFromEmployeeID(*id)
	}
	return pu
}

// SetPaymentFromEmployee sets the "payment_from_employee" edge to the EMPLOYEE entity.
func (pu *PAYMENTUpdate) SetPaymentFromEmployee(e *EMPLOYEE) *PAYMENTUpdate {
	return pu.SetPaymentFromEmployeeID(e.ID)
}

// SetPaymentFromCurrencyID sets the "payment_from_currency" edge to the CRYPTO_CURRENCY entity by ID.
func (pu *PAYMENTUpdate) SetPaymentFromCurrencyID(id int) *PAYMENTUpdate {
	pu.mutation.SetPaymentFromCurrencyID(id)
	return pu
}

// SetNillablePaymentFromCurrencyID sets the "payment_from_currency" edge to the CRYPTO_CURRENCY entity by ID if the given value is not nil.
func (pu *PAYMENTUpdate) SetNillablePaymentFromCurrencyID(id *int) *PAYMENTUpdate {
	if id != nil {
		pu = pu.SetPaymentFromCurrencyID(*id)
	}
	return pu
}

// SetPaymentFromCurrency sets the "payment_from_currency" edge to the CRYPTO_CURRENCY entity.
func (pu *PAYMENTUpdate) SetPaymentFromCurrency(c *CRYPTO_CURRENCY) *PAYMENTUpdate {
	return pu.SetPaymentFromCurrencyID(c.ID)
}

// Mutation returns the PAYMENTMutation object of the builder.
func (pu *PAYMENTUpdate) Mutation() *PAYMENTMutation {
	return pu.mutation
}

// ClearPaymentFromEmployer clears the "payment_from_employer" edge to the EMPLOYER entity.
func (pu *PAYMENTUpdate) ClearPaymentFromEmployer() *PAYMENTUpdate {
	pu.mutation.ClearPaymentFromEmployer()
	return pu
}

// ClearPaymentFromEmployee clears the "payment_from_employee" edge to the EMPLOYEE entity.
func (pu *PAYMENTUpdate) ClearPaymentFromEmployee() *PAYMENTUpdate {
	pu.mutation.ClearPaymentFromEmployee()
	return pu
}

// ClearPaymentFromCurrency clears the "payment_from_currency" edge to the CRYPTO_CURRENCY entity.
func (pu *PAYMENTUpdate) ClearPaymentFromCurrency() *PAYMENTUpdate {
	pu.mutation.ClearPaymentFromCurrency()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PAYMENTUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PAYMENTMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PAYMENTUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PAYMENTUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PAYMENTUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PAYMENTUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PaymentScheduled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldPaymentScheduled,
		})
	}
	if pu.mutation.PaymentScheduledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldPaymentScheduled,
		})
	}
	if value, ok := pu.mutation.PaymentExecuted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldPaymentExecuted,
		})
	}
	if pu.mutation.PaymentExecutedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldPaymentExecuted,
		})
	}
	if value, ok := pu.mutation.PaymentAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPaymentAmount,
		})
	}
	if value, ok := pu.mutation.AddedPaymentAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPaymentAmount,
		})
	}
	if pu.mutation.PaymentFromEmployerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployerTable,
			Columns: []string{payment.PaymentFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymentFromEmployerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployerTable,
			Columns: []string{payment.PaymentFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PaymentFromEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployeeTable,
			Columns: []string{payment.PaymentFromEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymentFromEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployeeTable,
			Columns: []string{payment.PaymentFromEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PaymentFromCurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromCurrencyTable,
			Columns: []string{payment.PaymentFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymentFromCurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromCurrencyTable,
			Columns: []string{payment.PaymentFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PAYMENTUpdateOne is the builder for updating a single PAYMENT entity.
type PAYMENTUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PAYMENTMutation
}

// SetEmployeeID sets the "employee_id" field.
func (puo *PAYMENTUpdateOne) SetEmployeeID(i int) *PAYMENTUpdateOne {
	puo.mutation.SetEmployeeID(i)
	return puo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillableEmployeeID(i *int) *PAYMENTUpdateOne {
	if i != nil {
		puo.SetEmployeeID(*i)
	}
	return puo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (puo *PAYMENTUpdateOne) ClearEmployeeID() *PAYMENTUpdateOne {
	puo.mutation.ClearEmployeeID()
	return puo
}

// SetEmployerID sets the "employer_id" field.
func (puo *PAYMENTUpdateOne) SetEmployerID(i int) *PAYMENTUpdateOne {
	puo.mutation.SetEmployerID(i)
	return puo
}

// SetNillableEmployerID sets the "employer_id" field if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillableEmployerID(i *int) *PAYMENTUpdateOne {
	if i != nil {
		puo.SetEmployerID(*i)
	}
	return puo
}

// ClearEmployerID clears the value of the "employer_id" field.
func (puo *PAYMENTUpdateOne) ClearEmployerID() *PAYMENTUpdateOne {
	puo.mutation.ClearEmployerID()
	return puo
}

// SetPaymentScheduled sets the "payment_scheduled" field.
func (puo *PAYMENTUpdateOne) SetPaymentScheduled(t time.Time) *PAYMENTUpdateOne {
	puo.mutation.SetPaymentScheduled(t)
	return puo
}

// SetNillablePaymentScheduled sets the "payment_scheduled" field if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillablePaymentScheduled(t *time.Time) *PAYMENTUpdateOne {
	if t != nil {
		puo.SetPaymentScheduled(*t)
	}
	return puo
}

// ClearPaymentScheduled clears the value of the "payment_scheduled" field.
func (puo *PAYMENTUpdateOne) ClearPaymentScheduled() *PAYMENTUpdateOne {
	puo.mutation.ClearPaymentScheduled()
	return puo
}

// SetPaymentExecuted sets the "payment_executed" field.
func (puo *PAYMENTUpdateOne) SetPaymentExecuted(t time.Time) *PAYMENTUpdateOne {
	puo.mutation.SetPaymentExecuted(t)
	return puo
}

// SetNillablePaymentExecuted sets the "payment_executed" field if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillablePaymentExecuted(t *time.Time) *PAYMENTUpdateOne {
	if t != nil {
		puo.SetPaymentExecuted(*t)
	}
	return puo
}

// ClearPaymentExecuted clears the value of the "payment_executed" field.
func (puo *PAYMENTUpdateOne) ClearPaymentExecuted() *PAYMENTUpdateOne {
	puo.mutation.ClearPaymentExecuted()
	return puo
}

// SetPaymentAmount sets the "payment_amount" field.
func (puo *PAYMENTUpdateOne) SetPaymentAmount(f float64) *PAYMENTUpdateOne {
	puo.mutation.ResetPaymentAmount()
	puo.mutation.SetPaymentAmount(f)
	return puo
}

// AddPaymentAmount adds f to the "payment_amount" field.
func (puo *PAYMENTUpdateOne) AddPaymentAmount(f float64) *PAYMENTUpdateOne {
	puo.mutation.AddPaymentAmount(f)
	return puo
}

// SetCryptoCurrencyID sets the "crypto_currency_id" field.
func (puo *PAYMENTUpdateOne) SetCryptoCurrencyID(i int) *PAYMENTUpdateOne {
	puo.mutation.SetCryptoCurrencyID(i)
	return puo
}

// SetNillableCryptoCurrencyID sets the "crypto_currency_id" field if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillableCryptoCurrencyID(i *int) *PAYMENTUpdateOne {
	if i != nil {
		puo.SetCryptoCurrencyID(*i)
	}
	return puo
}

// ClearCryptoCurrencyID clears the value of the "crypto_currency_id" field.
func (puo *PAYMENTUpdateOne) ClearCryptoCurrencyID() *PAYMENTUpdateOne {
	puo.mutation.ClearCryptoCurrencyID()
	return puo
}

// SetPaymentFromEmployerID sets the "payment_from_employer" edge to the EMPLOYER entity by ID.
func (puo *PAYMENTUpdateOne) SetPaymentFromEmployerID(id int) *PAYMENTUpdateOne {
	puo.mutation.SetPaymentFromEmployerID(id)
	return puo
}

// SetNillablePaymentFromEmployerID sets the "payment_from_employer" edge to the EMPLOYER entity by ID if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillablePaymentFromEmployerID(id *int) *PAYMENTUpdateOne {
	if id != nil {
		puo = puo.SetPaymentFromEmployerID(*id)
	}
	return puo
}

// SetPaymentFromEmployer sets the "payment_from_employer" edge to the EMPLOYER entity.
func (puo *PAYMENTUpdateOne) SetPaymentFromEmployer(e *EMPLOYER) *PAYMENTUpdateOne {
	return puo.SetPaymentFromEmployerID(e.ID)
}

// SetPaymentFromEmployeeID sets the "payment_from_employee" edge to the EMPLOYEE entity by ID.
func (puo *PAYMENTUpdateOne) SetPaymentFromEmployeeID(id int) *PAYMENTUpdateOne {
	puo.mutation.SetPaymentFromEmployeeID(id)
	return puo
}

// SetNillablePaymentFromEmployeeID sets the "payment_from_employee" edge to the EMPLOYEE entity by ID if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillablePaymentFromEmployeeID(id *int) *PAYMENTUpdateOne {
	if id != nil {
		puo = puo.SetPaymentFromEmployeeID(*id)
	}
	return puo
}

// SetPaymentFromEmployee sets the "payment_from_employee" edge to the EMPLOYEE entity.
func (puo *PAYMENTUpdateOne) SetPaymentFromEmployee(e *EMPLOYEE) *PAYMENTUpdateOne {
	return puo.SetPaymentFromEmployeeID(e.ID)
}

// SetPaymentFromCurrencyID sets the "payment_from_currency" edge to the CRYPTO_CURRENCY entity by ID.
func (puo *PAYMENTUpdateOne) SetPaymentFromCurrencyID(id int) *PAYMENTUpdateOne {
	puo.mutation.SetPaymentFromCurrencyID(id)
	return puo
}

// SetNillablePaymentFromCurrencyID sets the "payment_from_currency" edge to the CRYPTO_CURRENCY entity by ID if the given value is not nil.
func (puo *PAYMENTUpdateOne) SetNillablePaymentFromCurrencyID(id *int) *PAYMENTUpdateOne {
	if id != nil {
		puo = puo.SetPaymentFromCurrencyID(*id)
	}
	return puo
}

// SetPaymentFromCurrency sets the "payment_from_currency" edge to the CRYPTO_CURRENCY entity.
func (puo *PAYMENTUpdateOne) SetPaymentFromCurrency(c *CRYPTO_CURRENCY) *PAYMENTUpdateOne {
	return puo.SetPaymentFromCurrencyID(c.ID)
}

// Mutation returns the PAYMENTMutation object of the builder.
func (puo *PAYMENTUpdateOne) Mutation() *PAYMENTMutation {
	return puo.mutation
}

// ClearPaymentFromEmployer clears the "payment_from_employer" edge to the EMPLOYER entity.
func (puo *PAYMENTUpdateOne) ClearPaymentFromEmployer() *PAYMENTUpdateOne {
	puo.mutation.ClearPaymentFromEmployer()
	return puo
}

// ClearPaymentFromEmployee clears the "payment_from_employee" edge to the EMPLOYEE entity.
func (puo *PAYMENTUpdateOne) ClearPaymentFromEmployee() *PAYMENTUpdateOne {
	puo.mutation.ClearPaymentFromEmployee()
	return puo
}

// ClearPaymentFromCurrency clears the "payment_from_currency" edge to the CRYPTO_CURRENCY entity.
func (puo *PAYMENTUpdateOne) ClearPaymentFromCurrency() *PAYMENTUpdateOne {
	puo.mutation.ClearPaymentFromCurrency()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PAYMENTUpdateOne) Select(field string, fields ...string) *PAYMENTUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated PAYMENT entity.
func (puo *PAYMENTUpdateOne) Save(ctx context.Context) (*PAYMENT, error) {
	var (
		err  error
		node *PAYMENT
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PAYMENTMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PAYMENT)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PAYMENTMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PAYMENTUpdateOne) SaveX(ctx context.Context) *PAYMENT {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PAYMENTUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PAYMENTUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PAYMENTUpdateOne) sqlSave(ctx context.Context) (_node *PAYMENT, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PAYMENT.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PaymentScheduled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldPaymentScheduled,
		})
	}
	if puo.mutation.PaymentScheduledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldPaymentScheduled,
		})
	}
	if value, ok := puo.mutation.PaymentExecuted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldPaymentExecuted,
		})
	}
	if puo.mutation.PaymentExecutedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldPaymentExecuted,
		})
	}
	if value, ok := puo.mutation.PaymentAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPaymentAmount,
		})
	}
	if value, ok := puo.mutation.AddedPaymentAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPaymentAmount,
		})
	}
	if puo.mutation.PaymentFromEmployerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployerTable,
			Columns: []string{payment.PaymentFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymentFromEmployerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployerTable,
			Columns: []string{payment.PaymentFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PaymentFromEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployeeTable,
			Columns: []string{payment.PaymentFromEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymentFromEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromEmployeeTable,
			Columns: []string{payment.PaymentFromEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PaymentFromCurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromCurrencyTable,
			Columns: []string{payment.PaymentFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymentFromCurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentFromCurrencyTable,
			Columns: []string{payment.PaymentFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PAYMENT{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
