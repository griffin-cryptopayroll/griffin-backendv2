// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/crypto_currency"
	"griffin-dao/ent/employ_type"
	"griffin-dao/ent/employee"
	"griffin-dao/ent/employer"
	"griffin-dao/ent/payment"
	"griffin-dao/ent/payment_history"
	"griffin-dao/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EMPLOYEEUpdate is the builder for updating EMPLOYEE entities.
type EMPLOYEEUpdate struct {
	config
	hooks    []Hook
	mutation *EMPLOYEEMutation
}

// Where appends a list predicates to the EMPLOYEEUpdate builder.
func (eu *EMPLOYEEUpdate) Where(ps ...predicate.EMPLOYEE) *EMPLOYEEUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetGid sets the "gid" field.
func (eu *EMPLOYEEUpdate) SetGid(s string) *EMPLOYEEUpdate {
	eu.mutation.SetGid(s)
	return eu
}

// SetEmployerID sets the "employer_id" field.
func (eu *EMPLOYEEUpdate) SetEmployerID(i int) *EMPLOYEEUpdate {
	eu.mutation.SetEmployerID(i)
	return eu
}

// SetNillableEmployerID sets the "employer_id" field if the given value is not nil.
func (eu *EMPLOYEEUpdate) SetNillableEmployerID(i *int) *EMPLOYEEUpdate {
	if i != nil {
		eu.SetEmployerID(*i)
	}
	return eu
}

// ClearEmployerID clears the value of the "employer_id" field.
func (eu *EMPLOYEEUpdate) ClearEmployerID() *EMPLOYEEUpdate {
	eu.mutation.ClearEmployerID()
	return eu
}

// SetName sets the "name" field.
func (eu *EMPLOYEEUpdate) SetName(s string) *EMPLOYEEUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetPosition sets the "position" field.
func (eu *EMPLOYEEUpdate) SetPosition(s string) *EMPLOYEEUpdate {
	eu.mutation.SetPosition(s)
	return eu
}

// SetWallet sets the "wallet" field.
func (eu *EMPLOYEEUpdate) SetWallet(s string) *EMPLOYEEUpdate {
	eu.mutation.SetWallet(s)
	return eu
}

// SetPayroll sets the "payroll" field.
func (eu *EMPLOYEEUpdate) SetPayroll(f float64) *EMPLOYEEUpdate {
	eu.mutation.ResetPayroll()
	eu.mutation.SetPayroll(f)
	return eu
}

// AddPayroll adds f to the "payroll" field.
func (eu *EMPLOYEEUpdate) AddPayroll(f float64) *EMPLOYEEUpdate {
	eu.mutation.AddPayroll(f)
	return eu
}

// SetCryptoCurrencyID sets the "crypto_currency_id" field.
func (eu *EMPLOYEEUpdate) SetCryptoCurrencyID(i int) *EMPLOYEEUpdate {
	eu.mutation.SetCryptoCurrencyID(i)
	return eu
}

// SetNillableCryptoCurrencyID sets the "crypto_currency_id" field if the given value is not nil.
func (eu *EMPLOYEEUpdate) SetNillableCryptoCurrencyID(i *int) *EMPLOYEEUpdate {
	if i != nil {
		eu.SetCryptoCurrencyID(*i)
	}
	return eu
}

// ClearCryptoCurrencyID clears the value of the "crypto_currency_id" field.
func (eu *EMPLOYEEUpdate) ClearCryptoCurrencyID() *EMPLOYEEUpdate {
	eu.mutation.ClearCryptoCurrencyID()
	return eu
}

// SetPayday sets the "payday" field.
func (eu *EMPLOYEEUpdate) SetPayday(t time.Time) *EMPLOYEEUpdate {
	eu.mutation.SetPayday(t)
	return eu
}

// SetEmployTypeID sets the "employ_type_id" field.
func (eu *EMPLOYEEUpdate) SetEmployTypeID(i int) *EMPLOYEEUpdate {
	eu.mutation.SetEmployTypeID(i)
	return eu
}

// SetNillableEmployTypeID sets the "employ_type_id" field if the given value is not nil.
func (eu *EMPLOYEEUpdate) SetNillableEmployTypeID(i *int) *EMPLOYEEUpdate {
	if i != nil {
		eu.SetEmployTypeID(*i)
	}
	return eu
}

// ClearEmployTypeID clears the value of the "employ_type_id" field.
func (eu *EMPLOYEEUpdate) ClearEmployTypeID() *EMPLOYEEUpdate {
	eu.mutation.ClearEmployTypeID()
	return eu
}

// SetEmail sets the "email" field.
func (eu *EMPLOYEEUpdate) SetEmail(s string) *EMPLOYEEUpdate {
	eu.mutation.SetEmail(s)
	return eu
}

// SetWorkStart sets the "work_start" field.
func (eu *EMPLOYEEUpdate) SetWorkStart(s string) *EMPLOYEEUpdate {
	eu.mutation.SetWorkStart(s)
	return eu
}

// SetWorkEnds sets the "work_ends" field.
func (eu *EMPLOYEEUpdate) SetWorkEnds(s string) *EMPLOYEEUpdate {
	eu.mutation.SetWorkEnds(s)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EMPLOYEEUpdate) SetCreatedAt(t time.Time) *EMPLOYEEUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetCreatedBy sets the "created_by" field.
func (eu *EMPLOYEEUpdate) SetCreatedBy(s string) *EMPLOYEEUpdate {
	eu.mutation.SetCreatedBy(s)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EMPLOYEEUpdate) SetUpdatedAt(t time.Time) *EMPLOYEEUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EMPLOYEEUpdate) SetUpdatedBy(s string) *EMPLOYEEUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// SetEmployeeFromCurrencyID sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity by ID.
func (eu *EMPLOYEEUpdate) SetEmployeeFromCurrencyID(id int) *EMPLOYEEUpdate {
	eu.mutation.SetEmployeeFromCurrencyID(id)
	return eu
}

// SetNillableEmployeeFromCurrencyID sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity by ID if the given value is not nil.
func (eu *EMPLOYEEUpdate) SetNillableEmployeeFromCurrencyID(id *int) *EMPLOYEEUpdate {
	if id != nil {
		eu = eu.SetEmployeeFromCurrencyID(*id)
	}
	return eu
}

// SetEmployeeFromCurrency sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity.
func (eu *EMPLOYEEUpdate) SetEmployeeFromCurrency(c *CRYPTO_CURRENCY) *EMPLOYEEUpdate {
	return eu.SetEmployeeFromCurrencyID(c.ID)
}

// SetEmployeeFromEmployTypeID sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity by ID.
func (eu *EMPLOYEEUpdate) SetEmployeeFromEmployTypeID(id int) *EMPLOYEEUpdate {
	eu.mutation.SetEmployeeFromEmployTypeID(id)
	return eu
}

// SetNillableEmployeeFromEmployTypeID sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity by ID if the given value is not nil.
func (eu *EMPLOYEEUpdate) SetNillableEmployeeFromEmployTypeID(id *int) *EMPLOYEEUpdate {
	if id != nil {
		eu = eu.SetEmployeeFromEmployTypeID(*id)
	}
	return eu
}

// SetEmployeeFromEmployType sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity.
func (eu *EMPLOYEEUpdate) SetEmployeeFromEmployType(e *EMPLOY_TYPE) *EMPLOYEEUpdate {
	return eu.SetEmployeeFromEmployTypeID(e.ID)
}

// SetEmployeeFromEmployerID sets the "employee_from_employer" edge to the EMPLOYER entity by ID.
func (eu *EMPLOYEEUpdate) SetEmployeeFromEmployerID(id int) *EMPLOYEEUpdate {
	eu.mutation.SetEmployeeFromEmployerID(id)
	return eu
}

// SetNillableEmployeeFromEmployerID sets the "employee_from_employer" edge to the EMPLOYER entity by ID if the given value is not nil.
func (eu *EMPLOYEEUpdate) SetNillableEmployeeFromEmployerID(id *int) *EMPLOYEEUpdate {
	if id != nil {
		eu = eu.SetEmployeeFromEmployerID(*id)
	}
	return eu
}

// SetEmployeeFromEmployer sets the "employee_from_employer" edge to the EMPLOYER entity.
func (eu *EMPLOYEEUpdate) SetEmployeeFromEmployer(e *EMPLOYER) *EMPLOYEEUpdate {
	return eu.SetEmployeeFromEmployerID(e.ID)
}

// AddEmployeeOfPaymentHistoryIDs adds the "employee_of_payment_history" edge to the PAYMENT_HISTORY entity by IDs.
func (eu *EMPLOYEEUpdate) AddEmployeeOfPaymentHistoryIDs(ids ...int) *EMPLOYEEUpdate {
	eu.mutation.AddEmployeeOfPaymentHistoryIDs(ids...)
	return eu
}

// AddEmployeeOfPaymentHistory adds the "employee_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (eu *EMPLOYEEUpdate) AddEmployeeOfPaymentHistory(p ...*PAYMENT_HISTORY) *EMPLOYEEUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddEmployeeOfPaymentHistoryIDs(ids...)
}

// AddEmployeeOfPaymentIDs adds the "employee_of_payment" edge to the PAYMENT entity by IDs.
func (eu *EMPLOYEEUpdate) AddEmployeeOfPaymentIDs(ids ...int) *EMPLOYEEUpdate {
	eu.mutation.AddEmployeeOfPaymentIDs(ids...)
	return eu
}

// AddEmployeeOfPayment adds the "employee_of_payment" edges to the PAYMENT entity.
func (eu *EMPLOYEEUpdate) AddEmployeeOfPayment(p ...*PAYMENT) *EMPLOYEEUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddEmployeeOfPaymentIDs(ids...)
}

// Mutation returns the EMPLOYEEMutation object of the builder.
func (eu *EMPLOYEEUpdate) Mutation() *EMPLOYEEMutation {
	return eu.mutation
}

// ClearEmployeeFromCurrency clears the "employee_from_currency" edge to the CRYPTO_CURRENCY entity.
func (eu *EMPLOYEEUpdate) ClearEmployeeFromCurrency() *EMPLOYEEUpdate {
	eu.mutation.ClearEmployeeFromCurrency()
	return eu
}

// ClearEmployeeFromEmployType clears the "employee_from_employ_type" edge to the EMPLOY_TYPE entity.
func (eu *EMPLOYEEUpdate) ClearEmployeeFromEmployType() *EMPLOYEEUpdate {
	eu.mutation.ClearEmployeeFromEmployType()
	return eu
}

// ClearEmployeeFromEmployer clears the "employee_from_employer" edge to the EMPLOYER entity.
func (eu *EMPLOYEEUpdate) ClearEmployeeFromEmployer() *EMPLOYEEUpdate {
	eu.mutation.ClearEmployeeFromEmployer()
	return eu
}

// ClearEmployeeOfPaymentHistory clears all "employee_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (eu *EMPLOYEEUpdate) ClearEmployeeOfPaymentHistory() *EMPLOYEEUpdate {
	eu.mutation.ClearEmployeeOfPaymentHistory()
	return eu
}

// RemoveEmployeeOfPaymentHistoryIDs removes the "employee_of_payment_history" edge to PAYMENT_HISTORY entities by IDs.
func (eu *EMPLOYEEUpdate) RemoveEmployeeOfPaymentHistoryIDs(ids ...int) *EMPLOYEEUpdate {
	eu.mutation.RemoveEmployeeOfPaymentHistoryIDs(ids...)
	return eu
}

// RemoveEmployeeOfPaymentHistory removes "employee_of_payment_history" edges to PAYMENT_HISTORY entities.
func (eu *EMPLOYEEUpdate) RemoveEmployeeOfPaymentHistory(p ...*PAYMENT_HISTORY) *EMPLOYEEUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveEmployeeOfPaymentHistoryIDs(ids...)
}

// ClearEmployeeOfPayment clears all "employee_of_payment" edges to the PAYMENT entity.
func (eu *EMPLOYEEUpdate) ClearEmployeeOfPayment() *EMPLOYEEUpdate {
	eu.mutation.ClearEmployeeOfPayment()
	return eu
}

// RemoveEmployeeOfPaymentIDs removes the "employee_of_payment" edge to PAYMENT entities by IDs.
func (eu *EMPLOYEEUpdate) RemoveEmployeeOfPaymentIDs(ids ...int) *EMPLOYEEUpdate {
	eu.mutation.RemoveEmployeeOfPaymentIDs(ids...)
	return eu
}

// RemoveEmployeeOfPayment removes "employee_of_payment" edges to PAYMENT entities.
func (eu *EMPLOYEEUpdate) RemoveEmployeeOfPayment(p ...*PAYMENT) *EMPLOYEEUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveEmployeeOfPaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EMPLOYEEUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EMPLOYEEMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EMPLOYEEUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EMPLOYEEUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EMPLOYEEUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EMPLOYEEUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Gid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldGid,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldName,
		})
	}
	if value, ok := eu.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPosition,
		})
	}
	if value, ok := eu.mutation.Wallet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWallet,
		})
	}
	if value, ok := eu.mutation.Payroll(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: employee.FieldPayroll,
		})
	}
	if value, ok := eu.mutation.AddedPayroll(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: employee.FieldPayroll,
		})
	}
	if value, ok := eu.mutation.Payday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldPayday,
		})
	}
	if value, ok := eu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := eu.mutation.WorkStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWorkStart,
		})
	}
	if value, ok := eu.mutation.WorkEnds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWorkEnds,
		})
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldCreatedBy,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldUpdatedBy,
		})
	}
	if eu.mutation.EmployeeFromCurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromCurrencyTable,
			Columns: []string{employee.EmployeeFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeFromCurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromCurrencyTable,
			Columns: []string{employee.EmployeeFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmployeeFromEmployTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployTypeTable,
			Columns: []string{employee.EmployeeFromEmployTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employ_type.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeFromEmployTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployTypeTable,
			Columns: []string{employee.EmployeeFromEmployTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employ_type.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmployeeFromEmployerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployerTable,
			Columns: []string{employee.EmployeeFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeFromEmployerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployerTable,
			Columns: []string{employee.EmployeeFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmployeeOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentHistoryTable,
			Columns: []string{employee.EmployeeOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEmployeeOfPaymentHistoryIDs(); len(nodes) > 0 && !eu.mutation.EmployeeOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentHistoryTable,
			Columns: []string{employee.EmployeeOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeOfPaymentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentHistoryTable,
			Columns: []string{employee.EmployeeOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmployeeOfPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentTable,
			Columns: []string{employee.EmployeeOfPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEmployeeOfPaymentIDs(); len(nodes) > 0 && !eu.mutation.EmployeeOfPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentTable,
			Columns: []string{employee.EmployeeOfPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeOfPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentTable,
			Columns: []string{employee.EmployeeOfPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EMPLOYEEUpdateOne is the builder for updating a single EMPLOYEE entity.
type EMPLOYEEUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EMPLOYEEMutation
}

// SetGid sets the "gid" field.
func (euo *EMPLOYEEUpdateOne) SetGid(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetGid(s)
	return euo
}

// SetEmployerID sets the "employer_id" field.
func (euo *EMPLOYEEUpdateOne) SetEmployerID(i int) *EMPLOYEEUpdateOne {
	euo.mutation.SetEmployerID(i)
	return euo
}

// SetNillableEmployerID sets the "employer_id" field if the given value is not nil.
func (euo *EMPLOYEEUpdateOne) SetNillableEmployerID(i *int) *EMPLOYEEUpdateOne {
	if i != nil {
		euo.SetEmployerID(*i)
	}
	return euo
}

// ClearEmployerID clears the value of the "employer_id" field.
func (euo *EMPLOYEEUpdateOne) ClearEmployerID() *EMPLOYEEUpdateOne {
	euo.mutation.ClearEmployerID()
	return euo
}

// SetName sets the "name" field.
func (euo *EMPLOYEEUpdateOne) SetName(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetPosition sets the "position" field.
func (euo *EMPLOYEEUpdateOne) SetPosition(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetPosition(s)
	return euo
}

// SetWallet sets the "wallet" field.
func (euo *EMPLOYEEUpdateOne) SetWallet(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetWallet(s)
	return euo
}

// SetPayroll sets the "payroll" field.
func (euo *EMPLOYEEUpdateOne) SetPayroll(f float64) *EMPLOYEEUpdateOne {
	euo.mutation.ResetPayroll()
	euo.mutation.SetPayroll(f)
	return euo
}

// AddPayroll adds f to the "payroll" field.
func (euo *EMPLOYEEUpdateOne) AddPayroll(f float64) *EMPLOYEEUpdateOne {
	euo.mutation.AddPayroll(f)
	return euo
}

// SetCryptoCurrencyID sets the "crypto_currency_id" field.
func (euo *EMPLOYEEUpdateOne) SetCryptoCurrencyID(i int) *EMPLOYEEUpdateOne {
	euo.mutation.SetCryptoCurrencyID(i)
	return euo
}

// SetNillableCryptoCurrencyID sets the "crypto_currency_id" field if the given value is not nil.
func (euo *EMPLOYEEUpdateOne) SetNillableCryptoCurrencyID(i *int) *EMPLOYEEUpdateOne {
	if i != nil {
		euo.SetCryptoCurrencyID(*i)
	}
	return euo
}

// ClearCryptoCurrencyID clears the value of the "crypto_currency_id" field.
func (euo *EMPLOYEEUpdateOne) ClearCryptoCurrencyID() *EMPLOYEEUpdateOne {
	euo.mutation.ClearCryptoCurrencyID()
	return euo
}

// SetPayday sets the "payday" field.
func (euo *EMPLOYEEUpdateOne) SetPayday(t time.Time) *EMPLOYEEUpdateOne {
	euo.mutation.SetPayday(t)
	return euo
}

// SetEmployTypeID sets the "employ_type_id" field.
func (euo *EMPLOYEEUpdateOne) SetEmployTypeID(i int) *EMPLOYEEUpdateOne {
	euo.mutation.SetEmployTypeID(i)
	return euo
}

// SetNillableEmployTypeID sets the "employ_type_id" field if the given value is not nil.
func (euo *EMPLOYEEUpdateOne) SetNillableEmployTypeID(i *int) *EMPLOYEEUpdateOne {
	if i != nil {
		euo.SetEmployTypeID(*i)
	}
	return euo
}

// ClearEmployTypeID clears the value of the "employ_type_id" field.
func (euo *EMPLOYEEUpdateOne) ClearEmployTypeID() *EMPLOYEEUpdateOne {
	euo.mutation.ClearEmployTypeID()
	return euo
}

// SetEmail sets the "email" field.
func (euo *EMPLOYEEUpdateOne) SetEmail(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetEmail(s)
	return euo
}

// SetWorkStart sets the "work_start" field.
func (euo *EMPLOYEEUpdateOne) SetWorkStart(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetWorkStart(s)
	return euo
}

// SetWorkEnds sets the "work_ends" field.
func (euo *EMPLOYEEUpdateOne) SetWorkEnds(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetWorkEnds(s)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EMPLOYEEUpdateOne) SetCreatedAt(t time.Time) *EMPLOYEEUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetCreatedBy sets the "created_by" field.
func (euo *EMPLOYEEUpdateOne) SetCreatedBy(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetCreatedBy(s)
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EMPLOYEEUpdateOne) SetUpdatedAt(t time.Time) *EMPLOYEEUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EMPLOYEEUpdateOne) SetUpdatedBy(s string) *EMPLOYEEUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// SetEmployeeFromCurrencyID sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity by ID.
func (euo *EMPLOYEEUpdateOne) SetEmployeeFromCurrencyID(id int) *EMPLOYEEUpdateOne {
	euo.mutation.SetEmployeeFromCurrencyID(id)
	return euo
}

// SetNillableEmployeeFromCurrencyID sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity by ID if the given value is not nil.
func (euo *EMPLOYEEUpdateOne) SetNillableEmployeeFromCurrencyID(id *int) *EMPLOYEEUpdateOne {
	if id != nil {
		euo = euo.SetEmployeeFromCurrencyID(*id)
	}
	return euo
}

// SetEmployeeFromCurrency sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity.
func (euo *EMPLOYEEUpdateOne) SetEmployeeFromCurrency(c *CRYPTO_CURRENCY) *EMPLOYEEUpdateOne {
	return euo.SetEmployeeFromCurrencyID(c.ID)
}

// SetEmployeeFromEmployTypeID sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity by ID.
func (euo *EMPLOYEEUpdateOne) SetEmployeeFromEmployTypeID(id int) *EMPLOYEEUpdateOne {
	euo.mutation.SetEmployeeFromEmployTypeID(id)
	return euo
}

// SetNillableEmployeeFromEmployTypeID sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity by ID if the given value is not nil.
func (euo *EMPLOYEEUpdateOne) SetNillableEmployeeFromEmployTypeID(id *int) *EMPLOYEEUpdateOne {
	if id != nil {
		euo = euo.SetEmployeeFromEmployTypeID(*id)
	}
	return euo
}

// SetEmployeeFromEmployType sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity.
func (euo *EMPLOYEEUpdateOne) SetEmployeeFromEmployType(e *EMPLOY_TYPE) *EMPLOYEEUpdateOne {
	return euo.SetEmployeeFromEmployTypeID(e.ID)
}

// SetEmployeeFromEmployerID sets the "employee_from_employer" edge to the EMPLOYER entity by ID.
func (euo *EMPLOYEEUpdateOne) SetEmployeeFromEmployerID(id int) *EMPLOYEEUpdateOne {
	euo.mutation.SetEmployeeFromEmployerID(id)
	return euo
}

// SetNillableEmployeeFromEmployerID sets the "employee_from_employer" edge to the EMPLOYER entity by ID if the given value is not nil.
func (euo *EMPLOYEEUpdateOne) SetNillableEmployeeFromEmployerID(id *int) *EMPLOYEEUpdateOne {
	if id != nil {
		euo = euo.SetEmployeeFromEmployerID(*id)
	}
	return euo
}

// SetEmployeeFromEmployer sets the "employee_from_employer" edge to the EMPLOYER entity.
func (euo *EMPLOYEEUpdateOne) SetEmployeeFromEmployer(e *EMPLOYER) *EMPLOYEEUpdateOne {
	return euo.SetEmployeeFromEmployerID(e.ID)
}

// AddEmployeeOfPaymentHistoryIDs adds the "employee_of_payment_history" edge to the PAYMENT_HISTORY entity by IDs.
func (euo *EMPLOYEEUpdateOne) AddEmployeeOfPaymentHistoryIDs(ids ...int) *EMPLOYEEUpdateOne {
	euo.mutation.AddEmployeeOfPaymentHistoryIDs(ids...)
	return euo
}

// AddEmployeeOfPaymentHistory adds the "employee_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (euo *EMPLOYEEUpdateOne) AddEmployeeOfPaymentHistory(p ...*PAYMENT_HISTORY) *EMPLOYEEUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddEmployeeOfPaymentHistoryIDs(ids...)
}

// AddEmployeeOfPaymentIDs adds the "employee_of_payment" edge to the PAYMENT entity by IDs.
func (euo *EMPLOYEEUpdateOne) AddEmployeeOfPaymentIDs(ids ...int) *EMPLOYEEUpdateOne {
	euo.mutation.AddEmployeeOfPaymentIDs(ids...)
	return euo
}

// AddEmployeeOfPayment adds the "employee_of_payment" edges to the PAYMENT entity.
func (euo *EMPLOYEEUpdateOne) AddEmployeeOfPayment(p ...*PAYMENT) *EMPLOYEEUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddEmployeeOfPaymentIDs(ids...)
}

// Mutation returns the EMPLOYEEMutation object of the builder.
func (euo *EMPLOYEEUpdateOne) Mutation() *EMPLOYEEMutation {
	return euo.mutation
}

// ClearEmployeeFromCurrency clears the "employee_from_currency" edge to the CRYPTO_CURRENCY entity.
func (euo *EMPLOYEEUpdateOne) ClearEmployeeFromCurrency() *EMPLOYEEUpdateOne {
	euo.mutation.ClearEmployeeFromCurrency()
	return euo
}

// ClearEmployeeFromEmployType clears the "employee_from_employ_type" edge to the EMPLOY_TYPE entity.
func (euo *EMPLOYEEUpdateOne) ClearEmployeeFromEmployType() *EMPLOYEEUpdateOne {
	euo.mutation.ClearEmployeeFromEmployType()
	return euo
}

// ClearEmployeeFromEmployer clears the "employee_from_employer" edge to the EMPLOYER entity.
func (euo *EMPLOYEEUpdateOne) ClearEmployeeFromEmployer() *EMPLOYEEUpdateOne {
	euo.mutation.ClearEmployeeFromEmployer()
	return euo
}

// ClearEmployeeOfPaymentHistory clears all "employee_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (euo *EMPLOYEEUpdateOne) ClearEmployeeOfPaymentHistory() *EMPLOYEEUpdateOne {
	euo.mutation.ClearEmployeeOfPaymentHistory()
	return euo
}

// RemoveEmployeeOfPaymentHistoryIDs removes the "employee_of_payment_history" edge to PAYMENT_HISTORY entities by IDs.
func (euo *EMPLOYEEUpdateOne) RemoveEmployeeOfPaymentHistoryIDs(ids ...int) *EMPLOYEEUpdateOne {
	euo.mutation.RemoveEmployeeOfPaymentHistoryIDs(ids...)
	return euo
}

// RemoveEmployeeOfPaymentHistory removes "employee_of_payment_history" edges to PAYMENT_HISTORY entities.
func (euo *EMPLOYEEUpdateOne) RemoveEmployeeOfPaymentHistory(p ...*PAYMENT_HISTORY) *EMPLOYEEUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveEmployeeOfPaymentHistoryIDs(ids...)
}

// ClearEmployeeOfPayment clears all "employee_of_payment" edges to the PAYMENT entity.
func (euo *EMPLOYEEUpdateOne) ClearEmployeeOfPayment() *EMPLOYEEUpdateOne {
	euo.mutation.ClearEmployeeOfPayment()
	return euo
}

// RemoveEmployeeOfPaymentIDs removes the "employee_of_payment" edge to PAYMENT entities by IDs.
func (euo *EMPLOYEEUpdateOne) RemoveEmployeeOfPaymentIDs(ids ...int) *EMPLOYEEUpdateOne {
	euo.mutation.RemoveEmployeeOfPaymentIDs(ids...)
	return euo
}

// RemoveEmployeeOfPayment removes "employee_of_payment" edges to PAYMENT entities.
func (euo *EMPLOYEEUpdateOne) RemoveEmployeeOfPayment(p ...*PAYMENT) *EMPLOYEEUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveEmployeeOfPaymentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EMPLOYEEUpdateOne) Select(field string, fields ...string) *EMPLOYEEUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated EMPLOYEE entity.
func (euo *EMPLOYEEUpdateOne) Save(ctx context.Context) (*EMPLOYEE, error) {
	var (
		err  error
		node *EMPLOYEE
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EMPLOYEEMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EMPLOYEE)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EMPLOYEEMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EMPLOYEEUpdateOne) SaveX(ctx context.Context) *EMPLOYEE {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EMPLOYEEUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EMPLOYEEUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EMPLOYEEUpdateOne) sqlSave(ctx context.Context) (_node *EMPLOYEE, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EMPLOYEE.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Gid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldGid,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldName,
		})
	}
	if value, ok := euo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPosition,
		})
	}
	if value, ok := euo.mutation.Wallet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWallet,
		})
	}
	if value, ok := euo.mutation.Payroll(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: employee.FieldPayroll,
		})
	}
	if value, ok := euo.mutation.AddedPayroll(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: employee.FieldPayroll,
		})
	}
	if value, ok := euo.mutation.Payday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldPayday,
		})
	}
	if value, ok := euo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := euo.mutation.WorkStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWorkStart,
		})
	}
	if value, ok := euo.mutation.WorkEnds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWorkEnds,
		})
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldCreatedBy,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldUpdatedBy,
		})
	}
	if euo.mutation.EmployeeFromCurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromCurrencyTable,
			Columns: []string{employee.EmployeeFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeFromCurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromCurrencyTable,
			Columns: []string{employee.EmployeeFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmployeeFromEmployTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployTypeTable,
			Columns: []string{employee.EmployeeFromEmployTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employ_type.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeFromEmployTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployTypeTable,
			Columns: []string{employee.EmployeeFromEmployTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employ_type.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmployeeFromEmployerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployerTable,
			Columns: []string{employee.EmployeeFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeFromEmployerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployerTable,
			Columns: []string{employee.EmployeeFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmployeeOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentHistoryTable,
			Columns: []string{employee.EmployeeOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEmployeeOfPaymentHistoryIDs(); len(nodes) > 0 && !euo.mutation.EmployeeOfPaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentHistoryTable,
			Columns: []string{employee.EmployeeOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeOfPaymentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentHistoryTable,
			Columns: []string{employee.EmployeeOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmployeeOfPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentTable,
			Columns: []string{employee.EmployeeOfPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEmployeeOfPaymentIDs(); len(nodes) > 0 && !euo.mutation.EmployeeOfPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentTable,
			Columns: []string{employee.EmployeeOfPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeOfPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentTable,
			Columns: []string{employee.EmployeeOfPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EMPLOYEE{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
