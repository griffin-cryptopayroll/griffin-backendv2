// Code generated by ent, DO NOT EDIT.

package payment

const (
	// Label holds the string label denoting the payment type in the database.
	Label = "payment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldEmployerID holds the string denoting the employer_id field in the database.
	FieldEmployerID = "employer_id"
	// FieldPaymentScheduled holds the string denoting the payment_scheduled field in the database.
	FieldPaymentScheduled = "payment_scheduled"
	// FieldPaymentExecuted holds the string denoting the payment_executed field in the database.
	FieldPaymentExecuted = "payment_executed"
	// FieldPaymentAmount holds the string denoting the payment_amount field in the database.
	FieldPaymentAmount = "payment_amount"
	// FieldCryptoCurrencyID holds the string denoting the crypto_currency_id field in the database.
	FieldCryptoCurrencyID = "crypto_currency_id"
	// EdgePaymentFromEmployer holds the string denoting the payment_from_employer edge name in mutations.
	EdgePaymentFromEmployer = "payment_from_employer"
	// EdgePaymentFromEmployee holds the string denoting the payment_from_employee edge name in mutations.
	EdgePaymentFromEmployee = "payment_from_employee"
	// EdgePaymentFromCurrency holds the string denoting the payment_from_currency edge name in mutations.
	EdgePaymentFromCurrency = "payment_from_currency"
	// Table holds the table name of the payment in the database.
	Table = "payment"
	// PaymentFromEmployerTable is the table that holds the payment_from_employer relation/edge.
	PaymentFromEmployerTable = "payment"
	// PaymentFromEmployerInverseTable is the table name for the EMPLOYER entity.
	// It exists in this package in order to avoid circular dependency with the "employer" package.
	PaymentFromEmployerInverseTable = "employer"
	// PaymentFromEmployerColumn is the table column denoting the payment_from_employer relation/edge.
	PaymentFromEmployerColumn = "employer_id"
	// PaymentFromEmployeeTable is the table that holds the payment_from_employee relation/edge.
	PaymentFromEmployeeTable = "payment"
	// PaymentFromEmployeeInverseTable is the table name for the EMPLOYEE entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	PaymentFromEmployeeInverseTable = "employee"
	// PaymentFromEmployeeColumn is the table column denoting the payment_from_employee relation/edge.
	PaymentFromEmployeeColumn = "employee_id"
	// PaymentFromCurrencyTable is the table that holds the payment_from_currency relation/edge.
	PaymentFromCurrencyTable = "payment"
	// PaymentFromCurrencyInverseTable is the table name for the CRYPTO_CURRENCY entity.
	// It exists in this package in order to avoid circular dependency with the "crypto_currency" package.
	PaymentFromCurrencyInverseTable = "crypto_currency"
	// PaymentFromCurrencyColumn is the table column denoting the payment_from_currency relation/edge.
	PaymentFromCurrencyColumn = "crypto_currency_id"
)

// Columns holds all SQL columns for payment fields.
var Columns = []string{
	FieldID,
	FieldEmployeeID,
	FieldEmployerID,
	FieldPaymentScheduled,
	FieldPaymentExecuted,
	FieldPaymentAmount,
	FieldCryptoCurrencyID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
