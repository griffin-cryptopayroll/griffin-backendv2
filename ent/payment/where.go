// Code generated by ent, DO NOT EDIT.

package payment

import (
	"griffin-dao/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployerID applies equality check predicate on the "employer_id" field. It's identical to EmployerIDEQ.
func EmployerID(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployerID), v))
	})
}

// PaymentScheduled applies equality check predicate on the "payment_scheduled" field. It's identical to PaymentScheduledEQ.
func PaymentScheduled(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentScheduled), v))
	})
}

// PaymentExecuted applies equality check predicate on the "payment_executed" field. It's identical to PaymentExecutedEQ.
func PaymentExecuted(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentExecuted), v))
	})
}

// PaymentAmount applies equality check predicate on the "payment_amount" field. It's identical to PaymentAmountEQ.
func PaymentAmount(v float64) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// CryptoCurrencyID applies equality check predicate on the "crypto_currency_id" field. It's identical to CryptoCurrencyIDEQ.
func CryptoCurrencyID(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoCurrencyID), v))
	})
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...int) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...int) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDIsNil applies the IsNil predicate on the "employee_id" field.
func EmployeeIDIsNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmployeeID)))
	})
}

// EmployeeIDNotNil applies the NotNil predicate on the "employee_id" field.
func EmployeeIDNotNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmployeeID)))
	})
}

// EmployerIDEQ applies the EQ predicate on the "employer_id" field.
func EmployerIDEQ(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployerID), v))
	})
}

// EmployerIDNEQ applies the NEQ predicate on the "employer_id" field.
func EmployerIDNEQ(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployerID), v))
	})
}

// EmployerIDIn applies the In predicate on the "employer_id" field.
func EmployerIDIn(vs ...int) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmployerID), v...))
	})
}

// EmployerIDNotIn applies the NotIn predicate on the "employer_id" field.
func EmployerIDNotIn(vs ...int) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmployerID), v...))
	})
}

// EmployerIDIsNil applies the IsNil predicate on the "employer_id" field.
func EmployerIDIsNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmployerID)))
	})
}

// EmployerIDNotNil applies the NotNil predicate on the "employer_id" field.
func EmployerIDNotNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmployerID)))
	})
}

// PaymentScheduledEQ applies the EQ predicate on the "payment_scheduled" field.
func PaymentScheduledEQ(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentScheduled), v))
	})
}

// PaymentScheduledNEQ applies the NEQ predicate on the "payment_scheduled" field.
func PaymentScheduledNEQ(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentScheduled), v))
	})
}

// PaymentScheduledIn applies the In predicate on the "payment_scheduled" field.
func PaymentScheduledIn(vs ...time.Time) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentScheduled), v...))
	})
}

// PaymentScheduledNotIn applies the NotIn predicate on the "payment_scheduled" field.
func PaymentScheduledNotIn(vs ...time.Time) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentScheduled), v...))
	})
}

// PaymentScheduledGT applies the GT predicate on the "payment_scheduled" field.
func PaymentScheduledGT(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentScheduled), v))
	})
}

// PaymentScheduledGTE applies the GTE predicate on the "payment_scheduled" field.
func PaymentScheduledGTE(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentScheduled), v))
	})
}

// PaymentScheduledLT applies the LT predicate on the "payment_scheduled" field.
func PaymentScheduledLT(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentScheduled), v))
	})
}

// PaymentScheduledLTE applies the LTE predicate on the "payment_scheduled" field.
func PaymentScheduledLTE(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentScheduled), v))
	})
}

// PaymentScheduledIsNil applies the IsNil predicate on the "payment_scheduled" field.
func PaymentScheduledIsNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentScheduled)))
	})
}

// PaymentScheduledNotNil applies the NotNil predicate on the "payment_scheduled" field.
func PaymentScheduledNotNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentScheduled)))
	})
}

// PaymentExecutedEQ applies the EQ predicate on the "payment_executed" field.
func PaymentExecutedEQ(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentExecuted), v))
	})
}

// PaymentExecutedNEQ applies the NEQ predicate on the "payment_executed" field.
func PaymentExecutedNEQ(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentExecuted), v))
	})
}

// PaymentExecutedIn applies the In predicate on the "payment_executed" field.
func PaymentExecutedIn(vs ...time.Time) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentExecuted), v...))
	})
}

// PaymentExecutedNotIn applies the NotIn predicate on the "payment_executed" field.
func PaymentExecutedNotIn(vs ...time.Time) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentExecuted), v...))
	})
}

// PaymentExecutedGT applies the GT predicate on the "payment_executed" field.
func PaymentExecutedGT(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentExecuted), v))
	})
}

// PaymentExecutedGTE applies the GTE predicate on the "payment_executed" field.
func PaymentExecutedGTE(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentExecuted), v))
	})
}

// PaymentExecutedLT applies the LT predicate on the "payment_executed" field.
func PaymentExecutedLT(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentExecuted), v))
	})
}

// PaymentExecutedLTE applies the LTE predicate on the "payment_executed" field.
func PaymentExecutedLTE(v time.Time) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentExecuted), v))
	})
}

// PaymentExecutedIsNil applies the IsNil predicate on the "payment_executed" field.
func PaymentExecutedIsNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentExecuted)))
	})
}

// PaymentExecutedNotNil applies the NotNil predicate on the "payment_executed" field.
func PaymentExecutedNotNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentExecuted)))
	})
}

// PaymentAmountEQ applies the EQ predicate on the "payment_amount" field.
func PaymentAmountEQ(v float64) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountNEQ applies the NEQ predicate on the "payment_amount" field.
func PaymentAmountNEQ(v float64) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountIn applies the In predicate on the "payment_amount" field.
func PaymentAmountIn(vs ...float64) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountNotIn applies the NotIn predicate on the "payment_amount" field.
func PaymentAmountNotIn(vs ...float64) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountGT applies the GT predicate on the "payment_amount" field.
func PaymentAmountGT(v float64) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountGTE applies the GTE predicate on the "payment_amount" field.
func PaymentAmountGTE(v float64) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLT applies the LT predicate on the "payment_amount" field.
func PaymentAmountLT(v float64) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLTE applies the LTE predicate on the "payment_amount" field.
func PaymentAmountLTE(v float64) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentAmount), v))
	})
}

// CryptoCurrencyIDEQ applies the EQ predicate on the "crypto_currency_id" field.
func CryptoCurrencyIDEQ(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoCurrencyID), v))
	})
}

// CryptoCurrencyIDNEQ applies the NEQ predicate on the "crypto_currency_id" field.
func CryptoCurrencyIDNEQ(v int) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCryptoCurrencyID), v))
	})
}

// CryptoCurrencyIDIn applies the In predicate on the "crypto_currency_id" field.
func CryptoCurrencyIDIn(vs ...int) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCryptoCurrencyID), v...))
	})
}

// CryptoCurrencyIDNotIn applies the NotIn predicate on the "crypto_currency_id" field.
func CryptoCurrencyIDNotIn(vs ...int) predicate.PAYMENT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCryptoCurrencyID), v...))
	})
}

// CryptoCurrencyIDIsNil applies the IsNil predicate on the "crypto_currency_id" field.
func CryptoCurrencyIDIsNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCryptoCurrencyID)))
	})
}

// CryptoCurrencyIDNotNil applies the NotNil predicate on the "crypto_currency_id" field.
func CryptoCurrencyIDNotNil() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCryptoCurrencyID)))
	})
}

// HasPaymentFromEmployer applies the HasEdge predicate on the "payment_from_employer" edge.
func HasPaymentFromEmployer() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentFromEmployerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentFromEmployerTable, PaymentFromEmployerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentFromEmployerWith applies the HasEdge predicate on the "payment_from_employer" edge with a given conditions (other predicates).
func HasPaymentFromEmployerWith(preds ...predicate.EMPLOYER) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentFromEmployerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentFromEmployerTable, PaymentFromEmployerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentFromEmployee applies the HasEdge predicate on the "payment_from_employee" edge.
func HasPaymentFromEmployee() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentFromEmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentFromEmployeeTable, PaymentFromEmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentFromEmployeeWith applies the HasEdge predicate on the "payment_from_employee" edge with a given conditions (other predicates).
func HasPaymentFromEmployeeWith(preds ...predicate.EMPLOYEE) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentFromEmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentFromEmployeeTable, PaymentFromEmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentFromCurrency applies the HasEdge predicate on the "payment_from_currency" edge.
func HasPaymentFromCurrency() predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentFromCurrencyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentFromCurrencyTable, PaymentFromCurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentFromCurrencyWith applies the HasEdge predicate on the "payment_from_currency" edge with a given conditions (other predicates).
func HasPaymentFromCurrencyWith(preds ...predicate.CRYPTO_CURRENCY) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentFromCurrencyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentFromCurrencyTable, PaymentFromCurrencyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PAYMENT) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PAYMENT) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PAYMENT) predicate.PAYMENT {
	return predicate.PAYMENT(func(s *sql.Selector) {
		p(s.Not())
	})
}
