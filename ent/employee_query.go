// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"griffin-dao/ent/crypto_currency"
	"griffin-dao/ent/employ_type"
	"griffin-dao/ent/employee"
	"griffin-dao/ent/employer"
	"griffin-dao/ent/payment_history"
	"griffin-dao/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EMPLOYEEQuery is the builder for querying EMPLOYEE entities.
type EMPLOYEEQuery struct {
	config
	limit                        *int
	offset                       *int
	unique                       *bool
	order                        []OrderFunc
	fields                       []string
	predicates                   []predicate.EMPLOYEE
	withEmployeeFromCurrency     *CRYPTOCURRENCYQuery
	withEmployeeFromEmployType   *EMPLOYTYPEQuery
	withEmployeeFromEmployer     *EMPLOYERQuery
	withEmployeeOfPaymentHistory *PAYMENTHISTORYQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EMPLOYEEQuery builder.
func (eq *EMPLOYEEQuery) Where(ps ...predicate.EMPLOYEE) *EMPLOYEEQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *EMPLOYEEQuery) Limit(limit int) *EMPLOYEEQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *EMPLOYEEQuery) Offset(offset int) *EMPLOYEEQuery {
	eq.offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EMPLOYEEQuery) Unique(unique bool) *EMPLOYEEQuery {
	eq.unique = &unique
	return eq
}

// Order adds an order step to the query.
func (eq *EMPLOYEEQuery) Order(o ...OrderFunc) *EMPLOYEEQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryEmployeeFromCurrency chains the current query on the "employee_from_currency" edge.
func (eq *EMPLOYEEQuery) QueryEmployeeFromCurrency() *CRYPTOCURRENCYQuery {
	query := &CRYPTOCURRENCYQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(crypto_currency.Table, crypto_currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.EmployeeFromCurrencyTable, employee.EmployeeFromCurrencyColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployeeFromEmployType chains the current query on the "employee_from_employ_type" edge.
func (eq *EMPLOYEEQuery) QueryEmployeeFromEmployType() *EMPLOYTYPEQuery {
	query := &EMPLOYTYPEQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(employ_type.Table, employ_type.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.EmployeeFromEmployTypeTable, employee.EmployeeFromEmployTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployeeFromEmployer chains the current query on the "employee_from_employer" edge.
func (eq *EMPLOYEEQuery) QueryEmployeeFromEmployer() *EMPLOYERQuery {
	query := &EMPLOYERQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(employer.Table, employer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.EmployeeFromEmployerTable, employee.EmployeeFromEmployerColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployeeOfPaymentHistory chains the current query on the "employee_of_payment_history" edge.
func (eq *EMPLOYEEQuery) QueryEmployeeOfPaymentHistory() *PAYMENTHISTORYQuery {
	query := &PAYMENTHISTORYQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(payment_history.Table, payment_history.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EmployeeOfPaymentHistoryTable, employee.EmployeeOfPaymentHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EMPLOYEE entity from the query.
// Returns a *NotFoundError when no EMPLOYEE was found.
func (eq *EMPLOYEEQuery) First(ctx context.Context) (*EMPLOYEE, error) {
	nodes, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{employee.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EMPLOYEEQuery) FirstX(ctx context.Context) *EMPLOYEE {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EMPLOYEE ID from the query.
// Returns a *NotFoundError when no EMPLOYEE ID was found.
func (eq *EMPLOYEEQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{employee.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EMPLOYEEQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EMPLOYEE entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EMPLOYEE entity is found.
// Returns a *NotFoundError when no EMPLOYEE entities are found.
func (eq *EMPLOYEEQuery) Only(ctx context.Context) (*EMPLOYEE, error) {
	nodes, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{employee.Label}
	default:
		return nil, &NotSingularError{employee.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EMPLOYEEQuery) OnlyX(ctx context.Context) *EMPLOYEE {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EMPLOYEE ID in the query.
// Returns a *NotSingularError when more than one EMPLOYEE ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EMPLOYEEQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{employee.Label}
	default:
		err = &NotSingularError{employee.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EMPLOYEEQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EMPLOYEEs.
func (eq *EMPLOYEEQuery) All(ctx context.Context) ([]*EMPLOYEE, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *EMPLOYEEQuery) AllX(ctx context.Context) []*EMPLOYEE {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EMPLOYEE IDs.
func (eq *EMPLOYEEQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := eq.Select(employee.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EMPLOYEEQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EMPLOYEEQuery) Count(ctx context.Context) (int, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EMPLOYEEQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EMPLOYEEQuery) Exist(ctx context.Context) (bool, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EMPLOYEEQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EMPLOYEEQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EMPLOYEEQuery) Clone() *EMPLOYEEQuery {
	if eq == nil {
		return nil
	}
	return &EMPLOYEEQuery{
		config:                       eq.config,
		limit:                        eq.limit,
		offset:                       eq.offset,
		order:                        append([]OrderFunc{}, eq.order...),
		predicates:                   append([]predicate.EMPLOYEE{}, eq.predicates...),
		withEmployeeFromCurrency:     eq.withEmployeeFromCurrency.Clone(),
		withEmployeeFromEmployType:   eq.withEmployeeFromEmployType.Clone(),
		withEmployeeFromEmployer:     eq.withEmployeeFromEmployer.Clone(),
		withEmployeeOfPaymentHistory: eq.withEmployeeOfPaymentHistory.Clone(),
		// clone intermediate query.
		sql:    eq.sql.Clone(),
		path:   eq.path,
		unique: eq.unique,
	}
}

// WithEmployeeFromCurrency tells the query-builder to eager-load the nodes that are connected to
// the "employee_from_currency" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EMPLOYEEQuery) WithEmployeeFromCurrency(opts ...func(*CRYPTOCURRENCYQuery)) *EMPLOYEEQuery {
	query := &CRYPTOCURRENCYQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEmployeeFromCurrency = query
	return eq
}

// WithEmployeeFromEmployType tells the query-builder to eager-load the nodes that are connected to
// the "employee_from_employ_type" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EMPLOYEEQuery) WithEmployeeFromEmployType(opts ...func(*EMPLOYTYPEQuery)) *EMPLOYEEQuery {
	query := &EMPLOYTYPEQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEmployeeFromEmployType = query
	return eq
}

// WithEmployeeFromEmployer tells the query-builder to eager-load the nodes that are connected to
// the "employee_from_employer" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EMPLOYEEQuery) WithEmployeeFromEmployer(opts ...func(*EMPLOYERQuery)) *EMPLOYEEQuery {
	query := &EMPLOYERQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEmployeeFromEmployer = query
	return eq
}

// WithEmployeeOfPaymentHistory tells the query-builder to eager-load the nodes that are connected to
// the "employee_of_payment_history" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EMPLOYEEQuery) WithEmployeeOfPaymentHistory(opts ...func(*PAYMENTHISTORYQuery)) *EMPLOYEEQuery {
	query := &PAYMENTHISTORYQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEmployeeOfPaymentHistory = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Gid string `json:"gid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EMPLOYEE.Query().
//		GroupBy(employee.FieldGid).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EMPLOYEEQuery) GroupBy(field string, fields ...string) *EMPLOYEEGroupBy {
	grbuild := &EMPLOYEEGroupBy{config: eq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(ctx), nil
	}
	grbuild.label = employee.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Gid string `json:"gid,omitempty"`
//	}
//
//	client.EMPLOYEE.Query().
//		Select(employee.FieldGid).
//		Scan(ctx, &v)
func (eq *EMPLOYEEQuery) Select(fields ...string) *EMPLOYEESelect {
	eq.fields = append(eq.fields, fields...)
	selbuild := &EMPLOYEESelect{EMPLOYEEQuery: eq}
	selbuild.label = employee.Label
	selbuild.flds, selbuild.scan = &eq.fields, selbuild.Scan
	return selbuild
}

func (eq *EMPLOYEEQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eq.fields {
		if !employee.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EMPLOYEEQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EMPLOYEE, error) {
	var (
		nodes       = []*EMPLOYEE{}
		_spec       = eq.querySpec()
		loadedTypes = [4]bool{
			eq.withEmployeeFromCurrency != nil,
			eq.withEmployeeFromEmployType != nil,
			eq.withEmployeeFromEmployer != nil,
			eq.withEmployeeOfPaymentHistory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EMPLOYEE).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EMPLOYEE{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withEmployeeFromCurrency; query != nil {
		if err := eq.loadEmployeeFromCurrency(ctx, query, nodes, nil,
			func(n *EMPLOYEE, e *CRYPTO_CURRENCY) { n.Edges.EmployeeFromCurrency = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEmployeeFromEmployType; query != nil {
		if err := eq.loadEmployeeFromEmployType(ctx, query, nodes, nil,
			func(n *EMPLOYEE, e *EMPLOY_TYPE) { n.Edges.EmployeeFromEmployType = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEmployeeFromEmployer; query != nil {
		if err := eq.loadEmployeeFromEmployer(ctx, query, nodes, nil,
			func(n *EMPLOYEE, e *EMPLOYER) { n.Edges.EmployeeFromEmployer = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEmployeeOfPaymentHistory; query != nil {
		if err := eq.loadEmployeeOfPaymentHistory(ctx, query, nodes,
			func(n *EMPLOYEE) { n.Edges.EmployeeOfPaymentHistory = []*PAYMENT_HISTORY{} },
			func(n *EMPLOYEE, e *PAYMENT_HISTORY) {
				n.Edges.EmployeeOfPaymentHistory = append(n.Edges.EmployeeOfPaymentHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EMPLOYEEQuery) loadEmployeeFromCurrency(ctx context.Context, query *CRYPTOCURRENCYQuery, nodes []*EMPLOYEE, init func(*EMPLOYEE), assign func(*EMPLOYEE, *CRYPTO_CURRENCY)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EMPLOYEE)
	for i := range nodes {
		fk := nodes[i].CryptoCurrencyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(crypto_currency.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "crypto_currency_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EMPLOYEEQuery) loadEmployeeFromEmployType(ctx context.Context, query *EMPLOYTYPEQuery, nodes []*EMPLOYEE, init func(*EMPLOYEE), assign func(*EMPLOYEE, *EMPLOY_TYPE)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EMPLOYEE)
	for i := range nodes {
		fk := nodes[i].EmployTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(employ_type.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employ_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EMPLOYEEQuery) loadEmployeeFromEmployer(ctx context.Context, query *EMPLOYERQuery, nodes []*EMPLOYEE, init func(*EMPLOYEE), assign func(*EMPLOYEE, *EMPLOYER)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EMPLOYEE)
	for i := range nodes {
		fk := nodes[i].EmployerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(employer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EMPLOYEEQuery) loadEmployeeOfPaymentHistory(ctx context.Context, query *PAYMENTHISTORYQuery, nodes []*EMPLOYEE, init func(*EMPLOYEE), assign func(*EMPLOYEE, *PAYMENT_HISTORY)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*EMPLOYEE)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.PAYMENT_HISTORY(func(s *sql.Selector) {
		s.Where(sql.InValues(employee.EmployeeOfPaymentHistoryColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *EMPLOYEEQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.fields
	if len(eq.fields) > 0 {
		_spec.Unique = eq.unique != nil && *eq.unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EMPLOYEEQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := eq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (eq *EMPLOYEEQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if unique := eq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for i := range fields {
			if fields[i] != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EMPLOYEEQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(employee.Table)
	columns := eq.fields
	if len(columns) == 0 {
		columns = employee.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.unique != nil && *eq.unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EMPLOYEEGroupBy is the group-by builder for EMPLOYEE entities.
type EMPLOYEEGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EMPLOYEEGroupBy) Aggregate(fns ...AggregateFunc) *EMPLOYEEGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scans the result into the given value.
func (egb *EMPLOYEEGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := egb.path(ctx)
	if err != nil {
		return err
	}
	egb.sql = query
	return egb.sqlScan(ctx, v)
}

func (egb *EMPLOYEEGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range egb.fields {
		if !employee.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := egb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *EMPLOYEEGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql.Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(egb.fields)+len(egb.fns))
		for _, f := range egb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(egb.fields...)...)
}

// EMPLOYEESelect is the builder for selecting fields of EMPLOYEE entities.
type EMPLOYEESelect struct {
	*EMPLOYEEQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (es *EMPLOYEESelect) Scan(ctx context.Context, v interface{}) error {
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	es.sql = es.EMPLOYEEQuery.sqlQuery(ctx)
	return es.sqlScan(ctx, v)
}

func (es *EMPLOYEESelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := es.sql.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
