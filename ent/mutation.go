// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/crypto_currency"
	"griffin-dao/ent/crypto_prc_source"
	"griffin-dao/ent/predicate"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCRYPTO_CURRENCY    = "CRYPTO_CURRENCY"
	TypeCRYPTO_PRC_SOURCE  = "CRYPTO_PRC_SOURCE"
	TypeEMPLOYEE           = "EMPLOYEE"
	TypeEMPLOYER_USER_INFO = "EMPLOYER_USER_INFO"
	TypeEMPLOY_TYPE        = "EMPLOY_TYPE"
	TypePAYMENT_HISTORY    = "PAYMENT_HISTORY"
)

// CRYPTOCURRENCYMutation represents an operation that mutates the CRYPTO_CURRENCY nodes in the graph.
type CRYPTOCURRENCYMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	ticker                   *string
	source                   *int
	addsource                *int
	clearedFields            map[string]struct{}
	crypto_prc_source        map[int]struct{}
	removedcrypto_prc_source map[int]struct{}
	clearedcrypto_prc_source bool
	done                     bool
	oldValue                 func(context.Context) (*CRYPTO_CURRENCY, error)
	predicates               []predicate.CRYPTO_CURRENCY
}

var _ ent.Mutation = (*CRYPTOCURRENCYMutation)(nil)

// cryptoCURRENCYOption allows management of the mutation configuration using functional options.
type cryptoCURRENCYOption func(*CRYPTOCURRENCYMutation)

// newCRYPTOCURRENCYMutation creates new mutation for the CRYPTO_CURRENCY entity.
func newCRYPTOCURRENCYMutation(c config, op Op, opts ...cryptoCURRENCYOption) *CRYPTOCURRENCYMutation {
	m := &CRYPTOCURRENCYMutation{
		config:        c,
		op:            op,
		typ:           TypeCRYPTO_CURRENCY,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCRYPTO_CURRENCYID sets the ID field of the mutation.
func withCRYPTO_CURRENCYID(id int) cryptoCURRENCYOption {
	return func(m *CRYPTOCURRENCYMutation) {
		var (
			err   error
			once  sync.Once
			value *CRYPTO_CURRENCY
		)
		m.oldValue = func(ctx context.Context) (*CRYPTO_CURRENCY, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CRYPTO_CURRENCY.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCRYPTO_CURRENCY sets the old CRYPTO_CURRENCY of the mutation.
func withCRYPTO_CURRENCY(node *CRYPTO_CURRENCY) cryptoCURRENCYOption {
	return func(m *CRYPTOCURRENCYMutation) {
		m.oldValue = func(context.Context) (*CRYPTO_CURRENCY, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CRYPTOCURRENCYMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CRYPTOCURRENCYMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CRYPTO_CURRENCY entities.
func (m *CRYPTOCURRENCYMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CRYPTOCURRENCYMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CRYPTOCURRENCYMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CRYPTO_CURRENCY.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTicker sets the "ticker" field.
func (m *CRYPTOCURRENCYMutation) SetTicker(s string) {
	m.ticker = &s
}

// Ticker returns the value of the "ticker" field in the mutation.
func (m *CRYPTOCURRENCYMutation) Ticker() (r string, exists bool) {
	v := m.ticker
	if v == nil {
		return
	}
	return *v, true
}

// OldTicker returns the old "ticker" field's value of the CRYPTO_CURRENCY entity.
// If the CRYPTO_CURRENCY object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CRYPTOCURRENCYMutation) OldTicker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicker: %w", err)
	}
	return oldValue.Ticker, nil
}

// ResetTicker resets all changes to the "ticker" field.
func (m *CRYPTOCURRENCYMutation) ResetTicker() {
	m.ticker = nil
}

// SetSource sets the "source" field.
func (m *CRYPTOCURRENCYMutation) SetSource(i int) {
	m.source = &i
	m.addsource = nil
}

// Source returns the value of the "source" field in the mutation.
func (m *CRYPTOCURRENCYMutation) Source() (r int, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the CRYPTO_CURRENCY entity.
// If the CRYPTO_CURRENCY object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CRYPTOCURRENCYMutation) OldSource(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// AddSource adds i to the "source" field.
func (m *CRYPTOCURRENCYMutation) AddSource(i int) {
	if m.addsource != nil {
		*m.addsource += i
	} else {
		m.addsource = &i
	}
}

// AddedSource returns the value that was added to the "source" field in this mutation.
func (m *CRYPTOCURRENCYMutation) AddedSource() (r int, exists bool) {
	v := m.addsource
	if v == nil {
		return
	}
	return *v, true
}

// ResetSource resets all changes to the "source" field.
func (m *CRYPTOCURRENCYMutation) ResetSource() {
	m.source = nil
	m.addsource = nil
}

// AddCryptoPrcSourceIDs adds the "crypto_prc_source" edge to the CRYPTO_PRC_SOURCE entity by ids.
func (m *CRYPTOCURRENCYMutation) AddCryptoPrcSourceIDs(ids ...int) {
	if m.crypto_prc_source == nil {
		m.crypto_prc_source = make(map[int]struct{})
	}
	for i := range ids {
		m.crypto_prc_source[ids[i]] = struct{}{}
	}
}

// ClearCryptoPrcSource clears the "crypto_prc_source" edge to the CRYPTO_PRC_SOURCE entity.
func (m *CRYPTOCURRENCYMutation) ClearCryptoPrcSource() {
	m.clearedcrypto_prc_source = true
}

// CryptoPrcSourceCleared reports if the "crypto_prc_source" edge to the CRYPTO_PRC_SOURCE entity was cleared.
func (m *CRYPTOCURRENCYMutation) CryptoPrcSourceCleared() bool {
	return m.clearedcrypto_prc_source
}

// RemoveCryptoPrcSourceIDs removes the "crypto_prc_source" edge to the CRYPTO_PRC_SOURCE entity by IDs.
func (m *CRYPTOCURRENCYMutation) RemoveCryptoPrcSourceIDs(ids ...int) {
	if m.removedcrypto_prc_source == nil {
		m.removedcrypto_prc_source = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.crypto_prc_source, ids[i])
		m.removedcrypto_prc_source[ids[i]] = struct{}{}
	}
}

// RemovedCryptoPrcSource returns the removed IDs of the "crypto_prc_source" edge to the CRYPTO_PRC_SOURCE entity.
func (m *CRYPTOCURRENCYMutation) RemovedCryptoPrcSourceIDs() (ids []int) {
	for id := range m.removedcrypto_prc_source {
		ids = append(ids, id)
	}
	return
}

// CryptoPrcSourceIDs returns the "crypto_prc_source" edge IDs in the mutation.
func (m *CRYPTOCURRENCYMutation) CryptoPrcSourceIDs() (ids []int) {
	for id := range m.crypto_prc_source {
		ids = append(ids, id)
	}
	return
}

// ResetCryptoPrcSource resets all changes to the "crypto_prc_source" edge.
func (m *CRYPTOCURRENCYMutation) ResetCryptoPrcSource() {
	m.crypto_prc_source = nil
	m.clearedcrypto_prc_source = false
	m.removedcrypto_prc_source = nil
}

// Where appends a list predicates to the CRYPTOCURRENCYMutation builder.
func (m *CRYPTOCURRENCYMutation) Where(ps ...predicate.CRYPTO_CURRENCY) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CRYPTOCURRENCYMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CRYPTO_CURRENCY).
func (m *CRYPTOCURRENCYMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CRYPTOCURRENCYMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.ticker != nil {
		fields = append(fields, crypto_currency.FieldTicker)
	}
	if m.source != nil {
		fields = append(fields, crypto_currency.FieldSource)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CRYPTOCURRENCYMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case crypto_currency.FieldTicker:
		return m.Ticker()
	case crypto_currency.FieldSource:
		return m.Source()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CRYPTOCURRENCYMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case crypto_currency.FieldTicker:
		return m.OldTicker(ctx)
	case crypto_currency.FieldSource:
		return m.OldSource(ctx)
	}
	return nil, fmt.Errorf("unknown CRYPTO_CURRENCY field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CRYPTOCURRENCYMutation) SetField(name string, value ent.Value) error {
	switch name {
	case crypto_currency.FieldTicker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicker(v)
		return nil
	case crypto_currency.FieldSource:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	}
	return fmt.Errorf("unknown CRYPTO_CURRENCY field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CRYPTOCURRENCYMutation) AddedFields() []string {
	var fields []string
	if m.addsource != nil {
		fields = append(fields, crypto_currency.FieldSource)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CRYPTOCURRENCYMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case crypto_currency.FieldSource:
		return m.AddedSource()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CRYPTOCURRENCYMutation) AddField(name string, value ent.Value) error {
	switch name {
	case crypto_currency.FieldSource:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSource(v)
		return nil
	}
	return fmt.Errorf("unknown CRYPTO_CURRENCY numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CRYPTOCURRENCYMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CRYPTOCURRENCYMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CRYPTOCURRENCYMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CRYPTO_CURRENCY nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CRYPTOCURRENCYMutation) ResetField(name string) error {
	switch name {
	case crypto_currency.FieldTicker:
		m.ResetTicker()
		return nil
	case crypto_currency.FieldSource:
		m.ResetSource()
		return nil
	}
	return fmt.Errorf("unknown CRYPTO_CURRENCY field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CRYPTOCURRENCYMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.crypto_prc_source != nil {
		edges = append(edges, crypto_currency.EdgeCryptoPrcSource)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CRYPTOCURRENCYMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case crypto_currency.EdgeCryptoPrcSource:
		ids := make([]ent.Value, 0, len(m.crypto_prc_source))
		for id := range m.crypto_prc_source {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CRYPTOCURRENCYMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcrypto_prc_source != nil {
		edges = append(edges, crypto_currency.EdgeCryptoPrcSource)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CRYPTOCURRENCYMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case crypto_currency.EdgeCryptoPrcSource:
		ids := make([]ent.Value, 0, len(m.removedcrypto_prc_source))
		for id := range m.removedcrypto_prc_source {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CRYPTOCURRENCYMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcrypto_prc_source {
		edges = append(edges, crypto_currency.EdgeCryptoPrcSource)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CRYPTOCURRENCYMutation) EdgeCleared(name string) bool {
	switch name {
	case crypto_currency.EdgeCryptoPrcSource:
		return m.clearedcrypto_prc_source
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CRYPTOCURRENCYMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CRYPTO_CURRENCY unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CRYPTOCURRENCYMutation) ResetEdge(name string) error {
	switch name {
	case crypto_currency.EdgeCryptoPrcSource:
		m.ResetCryptoPrcSource()
		return nil
	}
	return fmt.Errorf("unknown CRYPTO_CURRENCY edge %s", name)
}

// CRYPTOPRCSOURCEMutation represents an operation that mutates the CRYPTO_PRC_SOURCE nodes in the graph.
type CRYPTOPRCSOURCEMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CRYPTO_PRC_SOURCE, error)
	predicates    []predicate.CRYPTO_PRC_SOURCE
}

var _ ent.Mutation = (*CRYPTOPRCSOURCEMutation)(nil)

// cryptoPRCSOURCEOption allows management of the mutation configuration using functional options.
type cryptoPRCSOURCEOption func(*CRYPTOPRCSOURCEMutation)

// newCRYPTOPRCSOURCEMutation creates new mutation for the CRYPTO_PRC_SOURCE entity.
func newCRYPTOPRCSOURCEMutation(c config, op Op, opts ...cryptoPRCSOURCEOption) *CRYPTOPRCSOURCEMutation {
	m := &CRYPTOPRCSOURCEMutation{
		config:        c,
		op:            op,
		typ:           TypeCRYPTO_PRC_SOURCE,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCRYPTO_PRC_SOURCEID sets the ID field of the mutation.
func withCRYPTO_PRC_SOURCEID(id int) cryptoPRCSOURCEOption {
	return func(m *CRYPTOPRCSOURCEMutation) {
		var (
			err   error
			once  sync.Once
			value *CRYPTO_PRC_SOURCE
		)
		m.oldValue = func(ctx context.Context) (*CRYPTO_PRC_SOURCE, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CRYPTO_PRC_SOURCE.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCRYPTO_PRC_SOURCE sets the old CRYPTO_PRC_SOURCE of the mutation.
func withCRYPTO_PRC_SOURCE(node *CRYPTO_PRC_SOURCE) cryptoPRCSOURCEOption {
	return func(m *CRYPTOPRCSOURCEMutation) {
		m.oldValue = func(context.Context) (*CRYPTO_PRC_SOURCE, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CRYPTOPRCSOURCEMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CRYPTOPRCSOURCEMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CRYPTO_PRC_SOURCE entities.
func (m *CRYPTOPRCSOURCEMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CRYPTOPRCSOURCEMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CRYPTOPRCSOURCEMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CRYPTO_PRC_SOURCE.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CRYPTOPRCSOURCEMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CRYPTOPRCSOURCEMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CRYPTO_PRC_SOURCE entity.
// If the CRYPTO_PRC_SOURCE object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CRYPTOPRCSOURCEMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CRYPTOPRCSOURCEMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the CRYPTOPRCSOURCEMutation builder.
func (m *CRYPTOPRCSOURCEMutation) Where(ps ...predicate.CRYPTO_PRC_SOURCE) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CRYPTOPRCSOURCEMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CRYPTO_PRC_SOURCE).
func (m *CRYPTOPRCSOURCEMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CRYPTOPRCSOURCEMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, crypto_prc_source.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CRYPTOPRCSOURCEMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case crypto_prc_source.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CRYPTOPRCSOURCEMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case crypto_prc_source.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown CRYPTO_PRC_SOURCE field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CRYPTOPRCSOURCEMutation) SetField(name string, value ent.Value) error {
	switch name {
	case crypto_prc_source.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown CRYPTO_PRC_SOURCE field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CRYPTOPRCSOURCEMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CRYPTOPRCSOURCEMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CRYPTOPRCSOURCEMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CRYPTO_PRC_SOURCE numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CRYPTOPRCSOURCEMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CRYPTOPRCSOURCEMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CRYPTOPRCSOURCEMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CRYPTO_PRC_SOURCE nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CRYPTOPRCSOURCEMutation) ResetField(name string) error {
	switch name {
	case crypto_prc_source.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown CRYPTO_PRC_SOURCE field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CRYPTOPRCSOURCEMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CRYPTOPRCSOURCEMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CRYPTOPRCSOURCEMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CRYPTOPRCSOURCEMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CRYPTOPRCSOURCEMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CRYPTOPRCSOURCEMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CRYPTOPRCSOURCEMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CRYPTO_PRC_SOURCE unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CRYPTOPRCSOURCEMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CRYPTO_PRC_SOURCE edge %s", name)
}

// EMPLOYEEMutation represents an operation that mutates the EMPLOYEE nodes in the graph.
type EMPLOYEEMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EMPLOYEE, error)
	predicates    []predicate.EMPLOYEE
}

var _ ent.Mutation = (*EMPLOYEEMutation)(nil)

// employeeOption allows management of the mutation configuration using functional options.
type employeeOption func(*EMPLOYEEMutation)

// newEMPLOYEEMutation creates new mutation for the EMPLOYEE entity.
func newEMPLOYEEMutation(c config, op Op, opts ...employeeOption) *EMPLOYEEMutation {
	m := &EMPLOYEEMutation{
		config:        c,
		op:            op,
		typ:           TypeEMPLOYEE,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEMPLOYEEID sets the ID field of the mutation.
func withEMPLOYEEID(id int) employeeOption {
	return func(m *EMPLOYEEMutation) {
		var (
			err   error
			once  sync.Once
			value *EMPLOYEE
		)
		m.oldValue = func(ctx context.Context) (*EMPLOYEE, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EMPLOYEE.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEMPLOYEE sets the old EMPLOYEE of the mutation.
func withEMPLOYEE(node *EMPLOYEE) employeeOption {
	return func(m *EMPLOYEEMutation) {
		m.oldValue = func(context.Context) (*EMPLOYEE, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EMPLOYEEMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EMPLOYEEMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EMPLOYEEMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EMPLOYEEMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EMPLOYEE.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the EMPLOYEEMutation builder.
func (m *EMPLOYEEMutation) Where(ps ...predicate.EMPLOYEE) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EMPLOYEEMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EMPLOYEE).
func (m *EMPLOYEEMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EMPLOYEEMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EMPLOYEEMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EMPLOYEEMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown EMPLOYEE field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EMPLOYEEMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EMPLOYEE field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EMPLOYEEMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EMPLOYEEMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EMPLOYEEMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown EMPLOYEE numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EMPLOYEEMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EMPLOYEEMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EMPLOYEEMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EMPLOYEE nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EMPLOYEEMutation) ResetField(name string) error {
	return fmt.Errorf("unknown EMPLOYEE field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EMPLOYEEMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EMPLOYEEMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EMPLOYEEMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EMPLOYEEMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EMPLOYEEMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EMPLOYEEMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EMPLOYEEMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EMPLOYEE unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EMPLOYEEMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EMPLOYEE edge %s", name)
}

// EMPLOYERUSERINFOMutation represents an operation that mutates the EMPLOYER_USER_INFO nodes in the graph.
type EMPLOYERUSERINFOMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EMPLOYER_USER_INFO, error)
	predicates    []predicate.EMPLOYER_USER_INFO
}

var _ ent.Mutation = (*EMPLOYERUSERINFOMutation)(nil)

// employerUSERINFOOption allows management of the mutation configuration using functional options.
type employerUSERINFOOption func(*EMPLOYERUSERINFOMutation)

// newEMPLOYERUSERINFOMutation creates new mutation for the EMPLOYER_USER_INFO entity.
func newEMPLOYERUSERINFOMutation(c config, op Op, opts ...employerUSERINFOOption) *EMPLOYERUSERINFOMutation {
	m := &EMPLOYERUSERINFOMutation{
		config:        c,
		op:            op,
		typ:           TypeEMPLOYER_USER_INFO,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEMPLOYER_USER_INFOID sets the ID field of the mutation.
func withEMPLOYER_USER_INFOID(id int) employerUSERINFOOption {
	return func(m *EMPLOYERUSERINFOMutation) {
		var (
			err   error
			once  sync.Once
			value *EMPLOYER_USER_INFO
		)
		m.oldValue = func(ctx context.Context) (*EMPLOYER_USER_INFO, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EMPLOYER_USER_INFO.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEMPLOYER_USER_INFO sets the old EMPLOYER_USER_INFO of the mutation.
func withEMPLOYER_USER_INFO(node *EMPLOYER_USER_INFO) employerUSERINFOOption {
	return func(m *EMPLOYERUSERINFOMutation) {
		m.oldValue = func(context.Context) (*EMPLOYER_USER_INFO, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EMPLOYERUSERINFOMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EMPLOYERUSERINFOMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EMPLOYERUSERINFOMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EMPLOYERUSERINFOMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EMPLOYER_USER_INFO.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the EMPLOYERUSERINFOMutation builder.
func (m *EMPLOYERUSERINFOMutation) Where(ps ...predicate.EMPLOYER_USER_INFO) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EMPLOYERUSERINFOMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EMPLOYER_USER_INFO).
func (m *EMPLOYERUSERINFOMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EMPLOYERUSERINFOMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EMPLOYERUSERINFOMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EMPLOYERUSERINFOMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown EMPLOYER_USER_INFO field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EMPLOYERUSERINFOMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EMPLOYER_USER_INFO field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EMPLOYERUSERINFOMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EMPLOYERUSERINFOMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EMPLOYERUSERINFOMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown EMPLOYER_USER_INFO numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EMPLOYERUSERINFOMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EMPLOYERUSERINFOMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EMPLOYERUSERINFOMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EMPLOYER_USER_INFO nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EMPLOYERUSERINFOMutation) ResetField(name string) error {
	return fmt.Errorf("unknown EMPLOYER_USER_INFO field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EMPLOYERUSERINFOMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EMPLOYERUSERINFOMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EMPLOYERUSERINFOMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EMPLOYERUSERINFOMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EMPLOYERUSERINFOMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EMPLOYERUSERINFOMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EMPLOYERUSERINFOMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EMPLOYER_USER_INFO unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EMPLOYERUSERINFOMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EMPLOYER_USER_INFO edge %s", name)
}

// EMPLOYTYPEMutation represents an operation that mutates the EMPLOY_TYPE nodes in the graph.
type EMPLOYTYPEMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EMPLOY_TYPE, error)
	predicates    []predicate.EMPLOY_TYPE
}

var _ ent.Mutation = (*EMPLOYTYPEMutation)(nil)

// employTYPEOption allows management of the mutation configuration using functional options.
type employTYPEOption func(*EMPLOYTYPEMutation)

// newEMPLOYTYPEMutation creates new mutation for the EMPLOY_TYPE entity.
func newEMPLOYTYPEMutation(c config, op Op, opts ...employTYPEOption) *EMPLOYTYPEMutation {
	m := &EMPLOYTYPEMutation{
		config:        c,
		op:            op,
		typ:           TypeEMPLOY_TYPE,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEMPLOY_TYPEID sets the ID field of the mutation.
func withEMPLOY_TYPEID(id int) employTYPEOption {
	return func(m *EMPLOYTYPEMutation) {
		var (
			err   error
			once  sync.Once
			value *EMPLOY_TYPE
		)
		m.oldValue = func(ctx context.Context) (*EMPLOY_TYPE, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EMPLOY_TYPE.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEMPLOY_TYPE sets the old EMPLOY_TYPE of the mutation.
func withEMPLOY_TYPE(node *EMPLOY_TYPE) employTYPEOption {
	return func(m *EMPLOYTYPEMutation) {
		m.oldValue = func(context.Context) (*EMPLOY_TYPE, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EMPLOYTYPEMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EMPLOYTYPEMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EMPLOYTYPEMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EMPLOYTYPEMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EMPLOY_TYPE.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the EMPLOYTYPEMutation builder.
func (m *EMPLOYTYPEMutation) Where(ps ...predicate.EMPLOY_TYPE) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EMPLOYTYPEMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EMPLOY_TYPE).
func (m *EMPLOYTYPEMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EMPLOYTYPEMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EMPLOYTYPEMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EMPLOYTYPEMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown EMPLOY_TYPE field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EMPLOYTYPEMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EMPLOY_TYPE field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EMPLOYTYPEMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EMPLOYTYPEMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EMPLOYTYPEMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown EMPLOY_TYPE numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EMPLOYTYPEMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EMPLOYTYPEMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EMPLOYTYPEMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EMPLOY_TYPE nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EMPLOYTYPEMutation) ResetField(name string) error {
	return fmt.Errorf("unknown EMPLOY_TYPE field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EMPLOYTYPEMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EMPLOYTYPEMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EMPLOYTYPEMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EMPLOYTYPEMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EMPLOYTYPEMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EMPLOYTYPEMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EMPLOYTYPEMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EMPLOY_TYPE unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EMPLOYTYPEMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EMPLOY_TYPE edge %s", name)
}

// PAYMENTHISTORYMutation represents an operation that mutates the PAYMENT_HISTORY nodes in the graph.
type PAYMENTHISTORYMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PAYMENT_HISTORY, error)
	predicates    []predicate.PAYMENT_HISTORY
}

var _ ent.Mutation = (*PAYMENTHISTORYMutation)(nil)

// paymentHISTORYOption allows management of the mutation configuration using functional options.
type paymentHISTORYOption func(*PAYMENTHISTORYMutation)

// newPAYMENTHISTORYMutation creates new mutation for the PAYMENT_HISTORY entity.
func newPAYMENTHISTORYMutation(c config, op Op, opts ...paymentHISTORYOption) *PAYMENTHISTORYMutation {
	m := &PAYMENTHISTORYMutation{
		config:        c,
		op:            op,
		typ:           TypePAYMENT_HISTORY,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPAYMENT_HISTORYID sets the ID field of the mutation.
func withPAYMENT_HISTORYID(id int) paymentHISTORYOption {
	return func(m *PAYMENTHISTORYMutation) {
		var (
			err   error
			once  sync.Once
			value *PAYMENT_HISTORY
		)
		m.oldValue = func(ctx context.Context) (*PAYMENT_HISTORY, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PAYMENT_HISTORY.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPAYMENT_HISTORY sets the old PAYMENT_HISTORY of the mutation.
func withPAYMENT_HISTORY(node *PAYMENT_HISTORY) paymentHISTORYOption {
	return func(m *PAYMENTHISTORYMutation) {
		m.oldValue = func(context.Context) (*PAYMENT_HISTORY, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PAYMENTHISTORYMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PAYMENTHISTORYMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PAYMENTHISTORYMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PAYMENTHISTORYMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PAYMENT_HISTORY.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the PAYMENTHISTORYMutation builder.
func (m *PAYMENTHISTORYMutation) Where(ps ...predicate.PAYMENT_HISTORY) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PAYMENTHISTORYMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PAYMENT_HISTORY).
func (m *PAYMENTHISTORYMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PAYMENTHISTORYMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PAYMENTHISTORYMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PAYMENTHISTORYMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown PAYMENT_HISTORY field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PAYMENTHISTORYMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PAYMENT_HISTORY field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PAYMENTHISTORYMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PAYMENTHISTORYMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PAYMENTHISTORYMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown PAYMENT_HISTORY numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PAYMENTHISTORYMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PAYMENTHISTORYMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PAYMENTHISTORYMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PAYMENT_HISTORY nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PAYMENTHISTORYMutation) ResetField(name string) error {
	return fmt.Errorf("unknown PAYMENT_HISTORY field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PAYMENTHISTORYMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PAYMENTHISTORYMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PAYMENTHISTORYMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PAYMENTHISTORYMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PAYMENTHISTORYMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PAYMENTHISTORYMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PAYMENTHISTORYMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PAYMENT_HISTORY unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PAYMENTHISTORYMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PAYMENT_HISTORY edge %s", name)
}
