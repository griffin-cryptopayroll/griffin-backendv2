// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"griffin-dao/ent/employer_user_info"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EMPLOYER_USER_INFO is the model entity for the EMPLOYER_USER_INFO schema.
type EMPLOYER_USER_INFO struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Gid holds the value of the "gid" field.
	Gid string `json:"gid,omitempty"`
	// CorpName holds the value of the "corp_name" field.
	CorpName string `json:"corp_name,omitempty"`
	// CorpEmail holds the value of the "corp_email" field.
	CorpEmail string `json:"corp_email,omitempty"`
	// Wallet holds the value of the "wallet" field.
	Wallet string `json:"wallet,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EMPLOYER_USER_INFOQuery when eager-loading is set.
	Edges EMPLOYER_USER_INFOEdges `json:"edges"`
}

// EMPLOYER_USER_INFOEdges holds the relations/edges for other nodes in the graph.
type EMPLOYER_USER_INFOEdges struct {
	// WorkUnder holds the value of the work_under edge.
	WorkUnder []*EMPLOYEE `json:"work_under,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkUnderOrErr returns the WorkUnder value or an error if the edge
// was not loaded in eager-loading.
func (e EMPLOYER_USER_INFOEdges) WorkUnderOrErr() ([]*EMPLOYEE, error) {
	if e.loadedTypes[0] {
		return e.WorkUnder, nil
	}
	return nil, &NotLoadedError{edge: "work_under"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EMPLOYER_USER_INFO) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case employer_user_info.FieldID:
			values[i] = new(sql.NullInt64)
		case employer_user_info.FieldUsername, employer_user_info.FieldPassword, employer_user_info.FieldGid, employer_user_info.FieldCorpName, employer_user_info.FieldCorpEmail, employer_user_info.FieldWallet, employer_user_info.FieldCreatedBy, employer_user_info.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case employer_user_info.FieldCreatedAt, employer_user_info.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EMPLOYER_USER_INFO", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EMPLOYER_USER_INFO fields.
func (eui *EMPLOYER_USER_INFO) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employer_user_info.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eui.ID = int(value.Int64)
		case employer_user_info.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				eui.Username = value.String
			}
		case employer_user_info.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				eui.Password = value.String
			}
		case employer_user_info.FieldGid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gid", values[i])
			} else if value.Valid {
				eui.Gid = value.String
			}
		case employer_user_info.FieldCorpName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corp_name", values[i])
			} else if value.Valid {
				eui.CorpName = value.String
			}
		case employer_user_info.FieldCorpEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corp_email", values[i])
			} else if value.Valid {
				eui.CorpEmail = value.String
			}
		case employer_user_info.FieldWallet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet", values[i])
			} else if value.Valid {
				eui.Wallet = value.String
			}
		case employer_user_info.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eui.CreatedAt = value.Time
			}
		case employer_user_info.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				eui.CreatedBy = value.String
			}
		case employer_user_info.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eui.UpdatedAt = value.Time
			}
		case employer_user_info.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				eui.UpdatedBy = value.String
			}
		}
	}
	return nil
}

// QueryWorkUnder queries the "work_under" edge of the EMPLOYER_USER_INFO entity.
func (eui *EMPLOYER_USER_INFO) QueryWorkUnder() *EMPLOYEEQuery {
	return (&EMPLOYER_USER_INFOClient{config: eui.config}).QueryWorkUnder(eui)
}

// Update returns a builder for updating this EMPLOYER_USER_INFO.
// Note that you need to call EMPLOYER_USER_INFO.Unwrap() before calling this method if this EMPLOYER_USER_INFO
// was returned from a transaction, and the transaction was committed or rolled back.
func (eui *EMPLOYER_USER_INFO) Update() *EMPLOYERUSERINFOUpdateOne {
	return (&EMPLOYER_USER_INFOClient{config: eui.config}).UpdateOne(eui)
}

// Unwrap unwraps the EMPLOYER_USER_INFO entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eui *EMPLOYER_USER_INFO) Unwrap() *EMPLOYER_USER_INFO {
	_tx, ok := eui.config.driver.(*txDriver)
	if !ok {
		panic("ent: EMPLOYER_USER_INFO is not a transactional entity")
	}
	eui.config.driver = _tx.drv
	return eui
}

// String implements the fmt.Stringer.
func (eui *EMPLOYER_USER_INFO) String() string {
	var builder strings.Builder
	builder.WriteString("EMPLOYER_USER_INFO(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eui.ID))
	builder.WriteString("username=")
	builder.WriteString(eui.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(eui.Password)
	builder.WriteString(", ")
	builder.WriteString("gid=")
	builder.WriteString(eui.Gid)
	builder.WriteString(", ")
	builder.WriteString("corp_name=")
	builder.WriteString(eui.CorpName)
	builder.WriteString(", ")
	builder.WriteString("corp_email=")
	builder.WriteString(eui.CorpEmail)
	builder.WriteString(", ")
	builder.WriteString("wallet=")
	builder.WriteString(eui.Wallet)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eui.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(eui.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eui.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(eui.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// EMPLOYER_USER_INFOs is a parsable slice of EMPLOYER_USER_INFO.
type EMPLOYER_USER_INFOs []*EMPLOYER_USER_INFO

func (eui EMPLOYER_USER_INFOs) config(cfg config) {
	for _i := range eui {
		eui[_i].config = cfg
	}
}
