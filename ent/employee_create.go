// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/crypto_currency"
	"griffin-dao/ent/employ_type"
	"griffin-dao/ent/employee"
	"griffin-dao/ent/employer"
	"griffin-dao/ent/payment"
	"griffin-dao/ent/payment_history"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EMPLOYEECreate is the builder for creating a EMPLOYEE entity.
type EMPLOYEECreate struct {
	config
	mutation *EMPLOYEEMutation
	hooks    []Hook
}

// SetGid sets the "gid" field.
func (ec *EMPLOYEECreate) SetGid(s string) *EMPLOYEECreate {
	ec.mutation.SetGid(s)
	return ec
}

// SetEmployerID sets the "employer_id" field.
func (ec *EMPLOYEECreate) SetEmployerID(i int) *EMPLOYEECreate {
	ec.mutation.SetEmployerID(i)
	return ec
}

// SetNillableEmployerID sets the "employer_id" field if the given value is not nil.
func (ec *EMPLOYEECreate) SetNillableEmployerID(i *int) *EMPLOYEECreate {
	if i != nil {
		ec.SetEmployerID(*i)
	}
	return ec
}

// SetName sets the "name" field.
func (ec *EMPLOYEECreate) SetName(s string) *EMPLOYEECreate {
	ec.mutation.SetName(s)
	return ec
}

// SetPosition sets the "position" field.
func (ec *EMPLOYEECreate) SetPosition(s string) *EMPLOYEECreate {
	ec.mutation.SetPosition(s)
	return ec
}

// SetWallet sets the "wallet" field.
func (ec *EMPLOYEECreate) SetWallet(s string) *EMPLOYEECreate {
	ec.mutation.SetWallet(s)
	return ec
}

// SetWalletAztec sets the "wallet_aztec" field.
func (ec *EMPLOYEECreate) SetWalletAztec(s string) *EMPLOYEECreate {
	ec.mutation.SetWalletAztec(s)
	return ec
}

// SetPayroll sets the "payroll" field.
func (ec *EMPLOYEECreate) SetPayroll(f float64) *EMPLOYEECreate {
	ec.mutation.SetPayroll(f)
	return ec
}

// SetCryptoCurrencyID sets the "crypto_currency_id" field.
func (ec *EMPLOYEECreate) SetCryptoCurrencyID(i int) *EMPLOYEECreate {
	ec.mutation.SetCryptoCurrencyID(i)
	return ec
}

// SetNillableCryptoCurrencyID sets the "crypto_currency_id" field if the given value is not nil.
func (ec *EMPLOYEECreate) SetNillableCryptoCurrencyID(i *int) *EMPLOYEECreate {
	if i != nil {
		ec.SetCryptoCurrencyID(*i)
	}
	return ec
}

// SetPayday sets the "payday" field.
func (ec *EMPLOYEECreate) SetPayday(t time.Time) *EMPLOYEECreate {
	ec.mutation.SetPayday(t)
	return ec
}

// SetEmployTypeID sets the "employ_type_id" field.
func (ec *EMPLOYEECreate) SetEmployTypeID(i int) *EMPLOYEECreate {
	ec.mutation.SetEmployTypeID(i)
	return ec
}

// SetNillableEmployTypeID sets the "employ_type_id" field if the given value is not nil.
func (ec *EMPLOYEECreate) SetNillableEmployTypeID(i *int) *EMPLOYEECreate {
	if i != nil {
		ec.SetEmployTypeID(*i)
	}
	return ec
}

// SetEmail sets the "email" field.
func (ec *EMPLOYEECreate) SetEmail(s string) *EMPLOYEECreate {
	ec.mutation.SetEmail(s)
	return ec
}

// SetWorkStart sets the "work_start" field.
func (ec *EMPLOYEECreate) SetWorkStart(s string) *EMPLOYEECreate {
	ec.mutation.SetWorkStart(s)
	return ec
}

// SetWorkEnds sets the "work_ends" field.
func (ec *EMPLOYEECreate) SetWorkEnds(s string) *EMPLOYEECreate {
	ec.mutation.SetWorkEnds(s)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EMPLOYEECreate) SetCreatedAt(t time.Time) *EMPLOYEECreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetCreatedBy sets the "created_by" field.
func (ec *EMPLOYEECreate) SetCreatedBy(s string) *EMPLOYEECreate {
	ec.mutation.SetCreatedBy(s)
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EMPLOYEECreate) SetUpdatedAt(t time.Time) *EMPLOYEECreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetUpdatedBy sets the "updated_by" field.
func (ec *EMPLOYEECreate) SetUpdatedBy(s string) *EMPLOYEECreate {
	ec.mutation.SetUpdatedBy(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EMPLOYEECreate) SetID(i int) *EMPLOYEECreate {
	ec.mutation.SetID(i)
	return ec
}

// SetEmployeeFromCurrencyID sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity by ID.
func (ec *EMPLOYEECreate) SetEmployeeFromCurrencyID(id int) *EMPLOYEECreate {
	ec.mutation.SetEmployeeFromCurrencyID(id)
	return ec
}

// SetNillableEmployeeFromCurrencyID sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity by ID if the given value is not nil.
func (ec *EMPLOYEECreate) SetNillableEmployeeFromCurrencyID(id *int) *EMPLOYEECreate {
	if id != nil {
		ec = ec.SetEmployeeFromCurrencyID(*id)
	}
	return ec
}

// SetEmployeeFromCurrency sets the "employee_from_currency" edge to the CRYPTO_CURRENCY entity.
func (ec *EMPLOYEECreate) SetEmployeeFromCurrency(c *CRYPTO_CURRENCY) *EMPLOYEECreate {
	return ec.SetEmployeeFromCurrencyID(c.ID)
}

// SetEmployeeFromEmployTypeID sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity by ID.
func (ec *EMPLOYEECreate) SetEmployeeFromEmployTypeID(id int) *EMPLOYEECreate {
	ec.mutation.SetEmployeeFromEmployTypeID(id)
	return ec
}

// SetNillableEmployeeFromEmployTypeID sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity by ID if the given value is not nil.
func (ec *EMPLOYEECreate) SetNillableEmployeeFromEmployTypeID(id *int) *EMPLOYEECreate {
	if id != nil {
		ec = ec.SetEmployeeFromEmployTypeID(*id)
	}
	return ec
}

// SetEmployeeFromEmployType sets the "employee_from_employ_type" edge to the EMPLOY_TYPE entity.
func (ec *EMPLOYEECreate) SetEmployeeFromEmployType(e *EMPLOY_TYPE) *EMPLOYEECreate {
	return ec.SetEmployeeFromEmployTypeID(e.ID)
}

// SetEmployeeFromEmployerID sets the "employee_from_employer" edge to the EMPLOYER entity by ID.
func (ec *EMPLOYEECreate) SetEmployeeFromEmployerID(id int) *EMPLOYEECreate {
	ec.mutation.SetEmployeeFromEmployerID(id)
	return ec
}

// SetNillableEmployeeFromEmployerID sets the "employee_from_employer" edge to the EMPLOYER entity by ID if the given value is not nil.
func (ec *EMPLOYEECreate) SetNillableEmployeeFromEmployerID(id *int) *EMPLOYEECreate {
	if id != nil {
		ec = ec.SetEmployeeFromEmployerID(*id)
	}
	return ec
}

// SetEmployeeFromEmployer sets the "employee_from_employer" edge to the EMPLOYER entity.
func (ec *EMPLOYEECreate) SetEmployeeFromEmployer(e *EMPLOYER) *EMPLOYEECreate {
	return ec.SetEmployeeFromEmployerID(e.ID)
}

// AddEmployeeOfPaymentHistoryIDs adds the "employee_of_payment_history" edge to the PAYMENT_HISTORY entity by IDs.
func (ec *EMPLOYEECreate) AddEmployeeOfPaymentHistoryIDs(ids ...int) *EMPLOYEECreate {
	ec.mutation.AddEmployeeOfPaymentHistoryIDs(ids...)
	return ec
}

// AddEmployeeOfPaymentHistory adds the "employee_of_payment_history" edges to the PAYMENT_HISTORY entity.
func (ec *EMPLOYEECreate) AddEmployeeOfPaymentHistory(p ...*PAYMENT_HISTORY) *EMPLOYEECreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddEmployeeOfPaymentHistoryIDs(ids...)
}

// AddEmployeeOfPaymentIDs adds the "employee_of_payment" edge to the PAYMENT entity by IDs.
func (ec *EMPLOYEECreate) AddEmployeeOfPaymentIDs(ids ...int) *EMPLOYEECreate {
	ec.mutation.AddEmployeeOfPaymentIDs(ids...)
	return ec
}

// AddEmployeeOfPayment adds the "employee_of_payment" edges to the PAYMENT entity.
func (ec *EMPLOYEECreate) AddEmployeeOfPayment(p ...*PAYMENT) *EMPLOYEECreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddEmployeeOfPaymentIDs(ids...)
}

// Mutation returns the EMPLOYEEMutation object of the builder.
func (ec *EMPLOYEECreate) Mutation() *EMPLOYEEMutation {
	return ec.mutation
}

// Save creates the EMPLOYEE in the database.
func (ec *EMPLOYEECreate) Save(ctx context.Context) (*EMPLOYEE, error) {
	var (
		err  error
		node *EMPLOYEE
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EMPLOYEEMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EMPLOYEE)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EMPLOYEEMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EMPLOYEECreate) SaveX(ctx context.Context) *EMPLOYEE {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EMPLOYEECreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EMPLOYEECreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EMPLOYEECreate) check() error {
	if _, ok := ec.mutation.Gid(); !ok {
		return &ValidationError{Name: "gid", err: errors.New(`ent: missing required field "EMPLOYEE.gid"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EMPLOYEE.name"`)}
	}
	if _, ok := ec.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "EMPLOYEE.position"`)}
	}
	if _, ok := ec.mutation.Wallet(); !ok {
		return &ValidationError{Name: "wallet", err: errors.New(`ent: missing required field "EMPLOYEE.wallet"`)}
	}
	if _, ok := ec.mutation.WalletAztec(); !ok {
		return &ValidationError{Name: "wallet_aztec", err: errors.New(`ent: missing required field "EMPLOYEE.wallet_aztec"`)}
	}
	if _, ok := ec.mutation.Payroll(); !ok {
		return &ValidationError{Name: "payroll", err: errors.New(`ent: missing required field "EMPLOYEE.payroll"`)}
	}
	if _, ok := ec.mutation.Payday(); !ok {
		return &ValidationError{Name: "payday", err: errors.New(`ent: missing required field "EMPLOYEE.payday"`)}
	}
	if _, ok := ec.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "EMPLOYEE.email"`)}
	}
	if _, ok := ec.mutation.WorkStart(); !ok {
		return &ValidationError{Name: "work_start", err: errors.New(`ent: missing required field "EMPLOYEE.work_start"`)}
	}
	if _, ok := ec.mutation.WorkEnds(); !ok {
		return &ValidationError{Name: "work_ends", err: errors.New(`ent: missing required field "EMPLOYEE.work_ends"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EMPLOYEE.created_at"`)}
	}
	if _, ok := ec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "EMPLOYEE.created_by"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EMPLOYEE.updated_at"`)}
	}
	if _, ok := ec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "EMPLOYEE.updated_by"`)}
	}
	return nil
}

func (ec *EMPLOYEECreate) sqlSave(ctx context.Context) (*EMPLOYEE, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ec *EMPLOYEECreate) createSpec() (*EMPLOYEE, *sqlgraph.CreateSpec) {
	var (
		_node = &EMPLOYEE{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: employee.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		}
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.Gid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldGid,
		})
		_node.Gid = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ec.mutation.Position(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPosition,
		})
		_node.Position = value
	}
	if value, ok := ec.mutation.Wallet(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWallet,
		})
		_node.Wallet = value
	}
	if value, ok := ec.mutation.WalletAztec(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWalletAztec,
		})
		_node.WalletAztec = value
	}
	if value, ok := ec.mutation.Payroll(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: employee.FieldPayroll,
		})
		_node.Payroll = value
	}
	if value, ok := ec.mutation.Payday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldPayday,
		})
		_node.Payday = value
	}
	if value, ok := ec.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := ec.mutation.WorkStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWorkStart,
		})
		_node.WorkStart = value
	}
	if value, ok := ec.mutation.WorkEnds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldWorkEnds,
		})
		_node.WorkEnds = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if nodes := ec.mutation.EmployeeFromCurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromCurrencyTable,
			Columns: []string{employee.EmployeeFromCurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: crypto_currency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CryptoCurrencyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EmployeeFromEmployTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployTypeTable,
			Columns: []string{employee.EmployeeFromEmployTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employ_type.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EmployeeFromEmployerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.EmployeeFromEmployerTable,
			Columns: []string{employee.EmployeeFromEmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EmployeeOfPaymentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentHistoryTable,
			Columns: []string{employee.EmployeeOfPaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment_history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EmployeeOfPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeeOfPaymentTable,
			Columns: []string{employee.EmployeeOfPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EMPLOYEECreateBulk is the builder for creating many EMPLOYEE entities in bulk.
type EMPLOYEECreateBulk struct {
	config
	builders []*EMPLOYEECreate
}

// Save creates the EMPLOYEE entities in the database.
func (ecb *EMPLOYEECreateBulk) Save(ctx context.Context) ([]*EMPLOYEE, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*EMPLOYEE, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EMPLOYEEMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EMPLOYEECreateBulk) SaveX(ctx context.Context) []*EMPLOYEE {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EMPLOYEECreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EMPLOYEECreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
