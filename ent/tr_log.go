// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"griffin-dao/ent/tr_log"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Tr_log is the model entity for the Tr_log schema.
type Tr_log struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TrType holds the value of the "tr_type" field.
	TrType string `json:"tr_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tr_log) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tr_log.FieldID:
			values[i] = new(sql.NullInt64)
		case tr_log.FieldTrType:
			values[i] = new(sql.NullString)
		case tr_log.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tr_log", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tr_log fields.
func (tl *Tr_log) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tr_log.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case tr_log.FieldTrType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tr_type", values[i])
			} else if value.Valid {
				tl.TrType = value.String
			}
		case tr_log.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Tr_log.
// Note that you need to call Tr_log.Unwrap() before calling this method if this Tr_log
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *Tr_log) Update() *TrLogUpdateOne {
	return (&Tr_logClient{config: tl.config}).UpdateOne(tl)
}

// Unwrap unwraps the Tr_log entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *Tr_log) Unwrap() *Tr_log {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tr_log is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *Tr_log) String() string {
	var builder strings.Builder
	builder.WriteString("Tr_log(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("tr_type=")
	builder.WriteString(tl.TrType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tr_logs is a parsable slice of Tr_log.
type Tr_logs []*Tr_log

func (tl Tr_logs) config(cfg config) {
	for _i := range tl {
		tl[_i].config = cfg
	}
}
