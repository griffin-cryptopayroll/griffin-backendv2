// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"griffin-dao/ent/employee"
	"griffin-dao/ent/employer"
	"griffin-dao/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EMPLOYERUpdate is the builder for updating EMPLOYER entities.
type EMPLOYERUpdate struct {
	config
	hooks    []Hook
	mutation *EMPLOYERMutation
}

// Where appends a list predicates to the EMPLOYERUpdate builder.
func (eu *EMPLOYERUpdate) Where(ps ...predicate.EMPLOYER) *EMPLOYERUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUsername sets the "username" field.
func (eu *EMPLOYERUpdate) SetUsername(s string) *EMPLOYERUpdate {
	eu.mutation.SetUsername(s)
	return eu
}

// SetPassword sets the "password" field.
func (eu *EMPLOYERUpdate) SetPassword(s string) *EMPLOYERUpdate {
	eu.mutation.SetPassword(s)
	return eu
}

// SetGid sets the "gid" field.
func (eu *EMPLOYERUpdate) SetGid(s string) *EMPLOYERUpdate {
	eu.mutation.SetGid(s)
	return eu
}

// SetCorpName sets the "corp_name" field.
func (eu *EMPLOYERUpdate) SetCorpName(s string) *EMPLOYERUpdate {
	eu.mutation.SetCorpName(s)
	return eu
}

// SetCorpEmail sets the "corp_email" field.
func (eu *EMPLOYERUpdate) SetCorpEmail(s string) *EMPLOYERUpdate {
	eu.mutation.SetCorpEmail(s)
	return eu
}

// SetWallet sets the "wallet" field.
func (eu *EMPLOYERUpdate) SetWallet(s string) *EMPLOYERUpdate {
	eu.mutation.SetWallet(s)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EMPLOYERUpdate) SetCreatedAt(t time.Time) *EMPLOYERUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetCreatedBy sets the "created_by" field.
func (eu *EMPLOYERUpdate) SetCreatedBy(s string) *EMPLOYERUpdate {
	eu.mutation.SetCreatedBy(s)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EMPLOYERUpdate) SetUpdatedAt(t time.Time) *EMPLOYERUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EMPLOYERUpdate) SetUpdatedBy(s string) *EMPLOYERUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// AddEmployerOfEmployeeIDs adds the "employer_of_employee" edge to the EMPLOYEE entity by IDs.
func (eu *EMPLOYERUpdate) AddEmployerOfEmployeeIDs(ids ...int) *EMPLOYERUpdate {
	eu.mutation.AddEmployerOfEmployeeIDs(ids...)
	return eu
}

// AddEmployerOfEmployee adds the "employer_of_employee" edges to the EMPLOYEE entity.
func (eu *EMPLOYERUpdate) AddEmployerOfEmployee(e ...*EMPLOYEE) *EMPLOYERUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEmployerOfEmployeeIDs(ids...)
}

// Mutation returns the EMPLOYERMutation object of the builder.
func (eu *EMPLOYERUpdate) Mutation() *EMPLOYERMutation {
	return eu.mutation
}

// ClearEmployerOfEmployee clears all "employer_of_employee" edges to the EMPLOYEE entity.
func (eu *EMPLOYERUpdate) ClearEmployerOfEmployee() *EMPLOYERUpdate {
	eu.mutation.ClearEmployerOfEmployee()
	return eu
}

// RemoveEmployerOfEmployeeIDs removes the "employer_of_employee" edge to EMPLOYEE entities by IDs.
func (eu *EMPLOYERUpdate) RemoveEmployerOfEmployeeIDs(ids ...int) *EMPLOYERUpdate {
	eu.mutation.RemoveEmployerOfEmployeeIDs(ids...)
	return eu
}

// RemoveEmployerOfEmployee removes "employer_of_employee" edges to EMPLOYEE entities.
func (eu *EMPLOYERUpdate) RemoveEmployerOfEmployee(e ...*EMPLOYEE) *EMPLOYERUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEmployerOfEmployeeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EMPLOYERUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EMPLOYERMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EMPLOYERUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EMPLOYERUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EMPLOYERUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EMPLOYERUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employer.Table,
			Columns: employer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employer.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldUsername,
		})
	}
	if value, ok := eu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldPassword,
		})
	}
	if value, ok := eu.mutation.Gid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldGid,
		})
	}
	if value, ok := eu.mutation.CorpName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldCorpName,
		})
	}
	if value, ok := eu.mutation.CorpEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldCorpEmail,
		})
	}
	if value, ok := eu.mutation.Wallet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldWallet,
		})
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employer.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldCreatedBy,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employer.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldUpdatedBy,
		})
	}
	if eu.mutation.EmployerOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employer.EmployerOfEmployeeTable,
			Columns: []string{employer.EmployerOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEmployerOfEmployeeIDs(); len(nodes) > 0 && !eu.mutation.EmployerOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employer.EmployerOfEmployeeTable,
			Columns: []string{employer.EmployerOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployerOfEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employer.EmployerOfEmployeeTable,
			Columns: []string{employer.EmployerOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EMPLOYERUpdateOne is the builder for updating a single EMPLOYER entity.
type EMPLOYERUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EMPLOYERMutation
}

// SetUsername sets the "username" field.
func (euo *EMPLOYERUpdateOne) SetUsername(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetUsername(s)
	return euo
}

// SetPassword sets the "password" field.
func (euo *EMPLOYERUpdateOne) SetPassword(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetPassword(s)
	return euo
}

// SetGid sets the "gid" field.
func (euo *EMPLOYERUpdateOne) SetGid(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetGid(s)
	return euo
}

// SetCorpName sets the "corp_name" field.
func (euo *EMPLOYERUpdateOne) SetCorpName(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetCorpName(s)
	return euo
}

// SetCorpEmail sets the "corp_email" field.
func (euo *EMPLOYERUpdateOne) SetCorpEmail(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetCorpEmail(s)
	return euo
}

// SetWallet sets the "wallet" field.
func (euo *EMPLOYERUpdateOne) SetWallet(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetWallet(s)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EMPLOYERUpdateOne) SetCreatedAt(t time.Time) *EMPLOYERUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetCreatedBy sets the "created_by" field.
func (euo *EMPLOYERUpdateOne) SetCreatedBy(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetCreatedBy(s)
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EMPLOYERUpdateOne) SetUpdatedAt(t time.Time) *EMPLOYERUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EMPLOYERUpdateOne) SetUpdatedBy(s string) *EMPLOYERUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// AddEmployerOfEmployeeIDs adds the "employer_of_employee" edge to the EMPLOYEE entity by IDs.
func (euo *EMPLOYERUpdateOne) AddEmployerOfEmployeeIDs(ids ...int) *EMPLOYERUpdateOne {
	euo.mutation.AddEmployerOfEmployeeIDs(ids...)
	return euo
}

// AddEmployerOfEmployee adds the "employer_of_employee" edges to the EMPLOYEE entity.
func (euo *EMPLOYERUpdateOne) AddEmployerOfEmployee(e ...*EMPLOYEE) *EMPLOYERUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEmployerOfEmployeeIDs(ids...)
}

// Mutation returns the EMPLOYERMutation object of the builder.
func (euo *EMPLOYERUpdateOne) Mutation() *EMPLOYERMutation {
	return euo.mutation
}

// ClearEmployerOfEmployee clears all "employer_of_employee" edges to the EMPLOYEE entity.
func (euo *EMPLOYERUpdateOne) ClearEmployerOfEmployee() *EMPLOYERUpdateOne {
	euo.mutation.ClearEmployerOfEmployee()
	return euo
}

// RemoveEmployerOfEmployeeIDs removes the "employer_of_employee" edge to EMPLOYEE entities by IDs.
func (euo *EMPLOYERUpdateOne) RemoveEmployerOfEmployeeIDs(ids ...int) *EMPLOYERUpdateOne {
	euo.mutation.RemoveEmployerOfEmployeeIDs(ids...)
	return euo
}

// RemoveEmployerOfEmployee removes "employer_of_employee" edges to EMPLOYEE entities.
func (euo *EMPLOYERUpdateOne) RemoveEmployerOfEmployee(e ...*EMPLOYEE) *EMPLOYERUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEmployerOfEmployeeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EMPLOYERUpdateOne) Select(field string, fields ...string) *EMPLOYERUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated EMPLOYER entity.
func (euo *EMPLOYERUpdateOne) Save(ctx context.Context) (*EMPLOYER, error) {
	var (
		err  error
		node *EMPLOYER
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EMPLOYERMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EMPLOYER)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EMPLOYERMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EMPLOYERUpdateOne) SaveX(ctx context.Context) *EMPLOYER {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EMPLOYERUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EMPLOYERUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EMPLOYERUpdateOne) sqlSave(ctx context.Context) (_node *EMPLOYER, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employer.Table,
			Columns: employer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employer.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EMPLOYER.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employer.FieldID)
		for _, f := range fields {
			if !employer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldUsername,
		})
	}
	if value, ok := euo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldPassword,
		})
	}
	if value, ok := euo.mutation.Gid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldGid,
		})
	}
	if value, ok := euo.mutation.CorpName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldCorpName,
		})
	}
	if value, ok := euo.mutation.CorpEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldCorpEmail,
		})
	}
	if value, ok := euo.mutation.Wallet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldWallet,
		})
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employer.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldCreatedBy,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employer.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employer.FieldUpdatedBy,
		})
	}
	if euo.mutation.EmployerOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employer.EmployerOfEmployeeTable,
			Columns: []string{employer.EmployerOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEmployerOfEmployeeIDs(); len(nodes) > 0 && !euo.mutation.EmployerOfEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employer.EmployerOfEmployeeTable,
			Columns: []string{employer.EmployerOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployerOfEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employer.EmployerOfEmployeeTable,
			Columns: []string{employer.EmployerOfEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EMPLOYER{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
